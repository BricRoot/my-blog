<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用WireGuard访问OpenWrt路由器下的局域网设备</title>
    <link href="/posts/33211/"/>
    <url>/posts/33211/</url>
    
    <content type="html"><![CDATA[<p>这个月开始放暑假了，闲的没事开始搞起了异地组网，这次记录一下我怎么配置的WireGuard</p><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><p>首先我们要有一台公网IP的服务器，这个服务器哪里都可以买到，只要宽带高就行，宽带低的话速度太慢了<br>系统我选择的是Debian，使用Ubuntu的话安装WireGuard的方式是一样的</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 安装WireGuard和iptables</span><br><span class="hljs-attribute">apt</span> update &amp;&amp; apt install wireguard iptables -y<br><span class="hljs-comment"># 配置IP转发</span><br><span class="hljs-attribute">sysctl</span> -w net.ipv4.ip_forward=<span class="hljs-number">1</span><br><span class="hljs-attribute">echo</span> &#x27;net.ipv4.ip_forward=<span class="hljs-number">1</span>&#x27; | sudo tee -a /etc/sysctl.conf<br><span class="hljs-comment"># 配置NAT规则(如果不懂下面每个配置的含义请保持默认)</span><br><span class="hljs-attribute">iptables</span> -t nat -A POSTROUTING -s <span class="hljs-number">10.0.0.0</span>/<span class="hljs-number">24</span> -o eth0 -j MASQUERADE<br><span class="hljs-attribute">iptables</span> -A FORWARD -i wg0 -o eth0 -j ACCEPT<br><span class="hljs-attribute">iptables</span> -A FORWARD -o wg0 -i eth0 -j ACCEPT<br></code></pre></td></tr></table></figure><p>等待跑完代码即可<br>接下来就是生成密钥，这个密钥就是我们本地设备与服务器互相连通的密码，这串密码非常的复杂，我们用下面的命令生成<br>我的设备有Debian(服务端)，OpenWrt(客户端)，安卓手机(客户端)，笔记本(客户端)，所以我需要生成四串密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 新建一个文件夹，这个文件夹存放密钥和配置文件</span><br><span class="hljs-built_in">mkdir</span> -p /etc/wireguard<br><span class="hljs-comment"># 生成Debian(服务端)的密钥</span><br>wg genkey | <span class="hljs-built_in">tee</span> server_private.key | wg pubkey | <span class="hljs-built_in">tee</span> server_public.key<br><span class="hljs-comment"># 生成Openwrt(客户端)的密钥</span><br>wg genkey | <span class="hljs-built_in">tee</span> openwrt_private.key | wg pubkey | <span class="hljs-built_in">tee</span> openwrt_public.key<br><span class="hljs-comment"># 生成安卓手机(客户端)的密钥</span><br>wg genkey | <span class="hljs-built_in">tee</span> android_private.key | wg pubkey | <span class="hljs-built_in">tee</span> android_public.key<br><span class="hljs-comment"># 生成笔记本(客户端)的密钥</span><br>wg genkey | <span class="hljs-built_in">tee</span> computer_private.key | wg pubkey | <span class="hljs-built_in">tee</span> computer_public.key<br></code></pre></td></tr></table></figure><p>接下来密钥就生成好了，然后来处理WireGuard的配置文件，配置文件位于&#x2F;etc&#x2F;wireguard&#x2F;wg0.conf请自行新建，下面的配置可以直接抄作业，请自行修改配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Interface]</span><br><span class="hljs-attr">PrivateKey</span> = 云服务器的私钥(server_private.key)<br><span class="hljs-attr">Address</span> = <span class="hljs-number">10.0</span>.<span class="hljs-number">0.1</span>/<span class="hljs-number">24</span><br><span class="hljs-attr">ListenPort</span> = <span class="hljs-number">51820</span><br><br><span class="hljs-section">[Peer]</span><br><span class="hljs-attr">PublicKey</span> = OpenWrt的公钥(openwrt_public.key)<br><span class="hljs-attr">AllowedIPs</span> = <span class="hljs-number">192.168</span>.<span class="hljs-number">2.0</span>/<span class="hljs-number">24</span>, <span class="hljs-number">10.0</span>.<span class="hljs-number">0.2</span>/<span class="hljs-number">32</span> <br><span class="hljs-comment"># 192.168.2.0为本地局域网IP段，请按实际修改</span><br><span class="hljs-attr">PersistentKeepalive</span> = <span class="hljs-number">25</span><br><br><span class="hljs-section">[Peer]</span><br><span class="hljs-attr">PublicKey</span> = 安卓手机的公钥(android_public.key)<br><span class="hljs-attr">AllowedIPs</span> = <span class="hljs-number">10.0</span>.<span class="hljs-number">0.3</span>/<span class="hljs-number">32</span><br><br><span class="hljs-section">[Peer]</span><br><span class="hljs-attr">PublicKey</span> = 笔记本的公钥(computer_public.key)<br><span class="hljs-attr">AllowedIPs</span> = <span class="hljs-number">10.0</span>.<span class="hljs-number">0.4</span>/<span class="hljs-number">32</span><br></code></pre></td></tr></table></figure><p>配置好文件后我们使用下面的命令启动WireGuard服务并添加开机自启动，@符号后面为配置文件名称，根据我的教程走的话保持默认即可</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">systemctl</span> start wg-quick<span class="hljs-variable">@wg0</span><br>systemctl enable wg-quick<span class="hljs-variable">@wg0</span><br></code></pre></td></tr></table></figure><h3 id="OpenWrt配置"><a href="#OpenWrt配置" class="headerlink" title="OpenWrt配置"></a>OpenWrt配置</h3><p>首先安装WireGuard</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">opkg update<br>opkg <span class="hljs-keyword">install</span> wireguard-tools kmod-wireguard<br></code></pre></td></tr></table></figure><p>接着编辑OpenWrt的网络配置文件，网络配置文件位于&#x2F;etc&#x2F;config&#x2F;network，也是直接抄作业，记得修改配置</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">config <span class="hljs-keyword">interface</span> <span class="hljs-comment">&#x27;wg0&#x27;</span><br>    <span class="hljs-keyword">option</span> proto <span class="hljs-comment">&#x27;wireguard&#x27;</span><br>    <span class="hljs-keyword">option</span> private_key <span class="hljs-comment">&#x27;OpenWrt的私钥(openwrt_private.key)&#x27;</span><br>    list addresses <span class="hljs-comment">&#x27;10.0.0.2/24&#x27;</span><br><br>config wireguard_wg0<br>    <span class="hljs-keyword">option</span> public_key <span class="hljs-comment">&#x27;云服务器的公钥(server_public.key)&#x27;</span><br>    <span class="hljs-keyword">option</span> endpoint_host <span class="hljs-comment">&#x27;云服务器的公网IP&#x27;</span><br>    <span class="hljs-keyword">option</span> endpoint_port <span class="hljs-comment">&#x27;51820&#x27;</span><br>    <span class="hljs-keyword">option</span> persistent_keepalive <span class="hljs-comment">&#x27;25&#x27;</span><br>    list allowed_ips <span class="hljs-comment">&#x27;0.0.0.0/0&#x27;</span><br></code></pre></td></tr></table></figure><p>接着配置防火墙，不然网络出不去，防火墙的配置文件位于&#x2F;etc&#x2F;config&#x2F;firewall，下面的内容直接复制粘贴即可，什么都不用改，前提是跟着我教程走的</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">config <span class="hljs-keyword">rule</span><br>    <span class="hljs-keyword">option</span> <span class="hljs-type">name</span> <span class="hljs-string">&#x27;Allow-WireGuard-Inbound&#x27;</span><br>    <span class="hljs-keyword">option</span> src <span class="hljs-string">&#x27;wan&#x27;</span><br>    <span class="hljs-keyword">option</span> dest_port <span class="hljs-string">&#x27;51820&#x27;</span><br>    <span class="hljs-keyword">option</span> proto <span class="hljs-string">&#x27;udp&#x27;</span><br>    <span class="hljs-keyword">option</span> target <span class="hljs-string">&#x27;ACCEPT&#x27;</span><br><br>config <span class="hljs-type">zone</span><br>    <span class="hljs-keyword">option</span> <span class="hljs-type">name</span> <span class="hljs-string">&#x27;wg&#x27;</span><br>    <span class="hljs-keyword">option</span> network <span class="hljs-string">&#x27;wg0&#x27;</span><br>    <span class="hljs-keyword">option</span> <span class="hljs-keyword">input</span> <span class="hljs-string">&#x27;ACCEPT&#x27;</span><br>    <span class="hljs-keyword">option</span> output <span class="hljs-string">&#x27;ACCEPT&#x27;</span><br>    <span class="hljs-keyword">option</span> forward <span class="hljs-string">&#x27;ACCEPT&#x27;</span><br>    <span class="hljs-keyword">option</span> masq <span class="hljs-string">&#x27;1&#x27;</span><br>    <span class="hljs-keyword">option</span> mtu_fix <span class="hljs-string">&#x27;1&#x27;</span><br><br>config forwarding<br>    <span class="hljs-keyword">option</span> src <span class="hljs-string">&#x27;wg&#x27;</span><br>    <span class="hljs-keyword">option</span> dest <span class="hljs-string">&#x27;lan&#x27;</span><br><br>config forwarding<br>    <span class="hljs-keyword">option</span> src <span class="hljs-string">&#x27;lan&#x27;</span><br>    <span class="hljs-keyword">option</span> dest <span class="hljs-string">&#x27;wg&#x27;</span><br></code></pre></td></tr></table></figure><p>前面的文件配置好后就可以重启网络和防火墙然后查看连接了</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>network restart<br><span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>firewall restart<br></code></pre></td></tr></table></figure><p>重启好网络和防火墙后，可以使用<code>wg</code>命令来查看连接情况<br><img src="/img/%E4%BD%BF%E7%94%A8WireGuard%E8%AE%BF%E9%97%AEOpenWrt%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B8%8B%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E8%AE%BE%E5%A4%87/1.png"></p><h3 id="安卓手机配置"><a href="#安卓手机配置" class="headerlink" title="安卓手机配置"></a>安卓手机配置</h3><p>安卓手机的话可以下载官方的软件，在下面的网站找到安卓设备类型即可<br>链接：<img src="https://www.wireguard.com/install/" alt="WireGuard官方下载网站"><br>下载好后安装打开，请按下面的格式填写，未提及的请保持默认</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs makefile">本地（Interface）<br><span class="hljs-section">名称: 随便填写都可以</span><br><span class="hljs-section">私钥: 安卓手机的私钥(android_private.key)</span><br><span class="hljs-section">公钥: 自动生成即可</span><br><span class="hljs-section">局域网IP: 10.0.0.4/24</span><br>！！！添加节点！！！<br>远程（Peer）<br><span class="hljs-section">公钥: 云服务器的公钥(server_public.key)</span><br><span class="hljs-section">连接保持间隔: 25</span><br><span class="hljs-section">对端: 云服务器的IP:51820</span><br><span class="hljs-section">路由的IP地址（段）: 192.168.2.0/24, 10.0.0.0/24</span><br></code></pre></td></tr></table></figure><p>保存然后启用就可以连接上了<br><img src="/img/%E4%BD%BF%E7%94%A8WireGuard%E8%AE%BF%E9%97%AEOpenWrt%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B8%8B%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E8%AE%BE%E5%A4%87/2.jpg"></p><h3 id="笔记本配置"><a href="#笔记本配置" class="headerlink" title="笔记本配置"></a>笔记本配置</h3><p>我的笔记本是Windows系统，还是刚才的链接，下载Windows设备类型的安装文件即可<br>链接：<img src="https://www.wireguard.com/install/" alt="WireGuard官方下载网站"><br>安装好后打开WireGuard，选择左下角的新建隧道<br><img src="/img/%E4%BD%BF%E7%94%A8WireGuard%E8%AE%BF%E9%97%AEOpenWrt%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B8%8B%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E8%AE%BE%E5%A4%87/3.png"><br>然后把下面的配置文件粘贴进去即可，记得修改里面的一些配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Interface]</span><br><span class="hljs-attr">PrivateKey</span> = 笔记本的私钥(computer_private.key)<br><span class="hljs-attr">Address</span> = <span class="hljs-number">10.0</span>.<span class="hljs-number">0.3</span>/<span class="hljs-number">24</span><br><br><span class="hljs-section">[Peer]</span><br><span class="hljs-attr">PublicKey</span> = 云服务器的公钥(server_public.key)<br><span class="hljs-attr">Endpoint</span> = 云服务器的IP:<span class="hljs-number">51820</span><br><span class="hljs-attr">AllowedIPs</span> = <span class="hljs-number">192.168</span>.<span class="hljs-number">2.0</span>/<span class="hljs-number">24</span>, <span class="hljs-number">10.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">24</span><br><span class="hljs-attr">PersistentKeepalive</span> = <span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><p>保存后点击连接就大功告成了，这样子就组成一个虚拟的局域网，访问的IP也是跟内网一样不需要改变，流量走的是云服务器的就不用怕没有公网IP</p>]]></content>
    
    
    <categories>
      
      <category>折腾日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Debian</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>WireGuard</tag>
      
      <tag>OpenWrt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小米12的优化</title>
    <link href="/posts/15001/"/>
    <url>/posts/15001/</url>
    
    <content type="html"><![CDATA[<p>博主在2023年11月25号在海鲜市场购买了一台小米12，之前是用小米Mix2s的，然后买了一台红米Note11TPro，这台手机被商家坑惨了，闪光灯有问题，屏幕有问题，还有一些奇怪的毛病，完完全全就是一台炸弹机<br>在2023年11月23号，我把Switch卖了之后就换了小米12了，当时没有看过任何的测评，感觉小米12，曲面屏，小屏，对称扬声器，骁龙8，应该很牛逼吧<br>曲面屏的手机一直没有体验过，而小屏一直是我所追求的，我自己觉得这俩搭配在一块可以说是绝配<br>小米12的扬声器音质听感舒适，加上模块加持，有着优秀的音效体验，然而，当玩游戏时，手持姿势可能会无意中挡住扬声器(沉默一下…)<br>接下来就是火龙8，刷个视频什么的很容易飚到四十多度，如果删除了温控，玩游戏甚至可以到达五十多度，现在知道火龙的威力了<br>下面是我自己优化的过程，因为我对温度不敏感，只要能流畅就行了</p><h3 id="Magisk模块推荐"><a href="#Magisk模块推荐" class="headerlink" title="Magisk模块推荐"></a>Magisk模块推荐</h3><p><img src="/img/%E5%B0%8F%E7%B1%B312%E7%9A%84%E4%BC%98%E5%8C%96/1.jpg"><br>模块的简介介绍的很详细了，这里就不做多赘述了</p><h4 id="模块下载链接："><a href="#模块下载链接：" class="headerlink" title="模块下载链接："></a>模块下载链接：</h4><p><strong>Haptic_RE</strong><br>下载: <a href="https://www.123pan.com/s/kGi9jv-0Kwuh.html">123云盘</a> 密码: 0809<br><strong>HSX - 设备音频IO深度处理</strong><br>下载：<a href="https://github.com/HuberHaYu/UpMod">Github</a><br><strong>Re:Kernel - Lite (5.10)</strong><br>下载：<a href="https://down.app.myflv.cn/ReKernel">官方网盘</a><br><strong>Scene的附加模块(二)</strong><br>下载：官方APP提供下载<br><strong>Xiaomi 12S 缩小挖孔遮罩</strong><br>下载：<a href="https://hiyorin.top/file/magisk/reducefrontsize12S.zip">官方直链</a><br><strong>Zygisk - LSPosed</strong><br>下载：<a href="https://github.com/mywalkb/LSPosed_mod">Github</a><br><strong>墓碑附加模块</strong><br>下载：<a href="https://down.app.myflv.cn/%E5%A2%93%E7%A2%91%E9%99%84%E5%8A%A0%E6%A8%A1%E5%9D%97.zip">官方网盘</a><br><strong>音量键极速救砖</strong><br>下载：<a href="https://www.123pan.cn/s/uH08Vv-OiwJH">123云盘</a></p><h3 id="LSPosed模块推荐"><a href="#LSPosed模块推荐" class="headerlink" title="LSPosed模块推荐"></a>LSPosed模块推荐</h3><p>这些是我自己在使用的LSPosed模块，大家可以在模块仓库里面搜索，在谷歌，酷安搜索都可以，都有介绍<br><img src="/img/%E5%B0%8F%E7%B1%B312%E7%9A%84%E4%BC%98%E5%8C%96/2.jpg"></p><h3 id="神奇代码"><a href="#神奇代码" class="headerlink" title="神奇代码"></a>神奇代码</h3><p>下面的代码可以按自己的需求自己增加，请把代码加到system.prop文件里面，默认的system分区的没有挂载权限，我们可以添加到模块的system.prop，模块的system.prop一般在<strong>&#x2F;data&#x2F;adb&#x2F;modules&#x2F;模块名称&#x2F;</strong>这个目录里面，有些模块可能没有system.prop文件，可以换一个模块目录</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">## 高级材质2.0</span><br><span class="hljs-attr">persist.sys.background_blur_supported</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">persist.sys.background_blur_status_default</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">persist.sys.background_blur_version</span>=<span class="hljs-number">2</span><br><span class="hljs-comment">## 游戏倍速</span><br><span class="hljs-attr">debug.game.video.support</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">debug.game.video.speed</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>以上就是我自己优化小米12的过程，其中Magisk模块<strong>Re:Kernel - Lite (5.10)<strong>，</strong>Scene附加模块(二)<strong>，</strong>墓碑附加模块</strong>和Lsposed模块<strong>NoActive</strong>，<strong>AppRetention</strong>这些是我配合着用的，火龙8的温度我是压不住的了，只能把流畅度拉高<br>下面是我自己用小米12拍摄的一些图片，相机是使用了莱卡相机<br>莱卡相机下载: <a href="https://www.123pan.com/s/HiGLVv-R7Vjv.html">123云盘</a></p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/%E5%B0%8F%E7%B1%B312%E7%9A%84%E4%BC%98%E5%8C%96/%E6%A0%B7%E7%89%87/IMG_20240502_180949.jpg"></div><div class="group-image-wrap"><img src="/img/%E5%B0%8F%E7%B1%B312%E7%9A%84%E4%BC%98%E5%8C%96/%E6%A0%B7%E7%89%87/IMG_20240503_174839.jpg"></div><div class="group-image-wrap"><img src="/img/%E5%B0%8F%E7%B1%B312%E7%9A%84%E4%BC%98%E5%8C%96/%E6%A0%B7%E7%89%87/IMG_20240503_183241.jpg"></div></div></div>]]></content>
    
    
    <categories>
      
      <category>折腾日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Magisk</tag>
      
      <tag>小米12</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023，总结</title>
    <link href="/posts/61822/"/>
    <url>/posts/61822/</url>
    
    <content type="html"><![CDATA[<h3 id="博客的成长之路"><a href="#博客的成长之路" class="headerlink" title="博客的成长之路"></a>博客的成长之路</h3><p>今年是我博客运行的第二年，我一共发布了六篇文章(我懒了)，这一年基本都在维护和优化博客，给博客增加一些功能<br>总的来说，虽然这一年里我只发布了五篇文章，但我却收获了许多宝贵的经验和成长<br>我希望在接下来的日子里，我能继续坚持下去，分享更多有价值的内容，让更多的人受益</p><h3 id="生活的点滴回忆"><a href="#生活的点滴回忆" class="headerlink" title="生活的点滴回忆"></a>生活的点滴回忆</h3><p>今年的生活充满了各种变化和挑战，我的Switch被偷了，手机刷机黑砖，还遇到一些技术上的问题，但是最后还是一一解决了，在这里感谢帮助我的所有人<br>有时候我会感到乏味和无聊，但我也学会了如何在平凡的生活中寻找乐趣，短视频和游戏成为了我消磨时光的方式，时间在不知不觉中流逝，我也意识到不能过度沉迷其中，应该合理安排时间，让生活更加充实</p><h3 id="技术的进步与挑战"><a href="#技术的进步与挑战" class="headerlink" title="技术的进步与挑战"></a>技术的进步与挑战</h3><p>今年，我认真折腾了AIO，从D525升级到D2550再升级到1037U再升级到J3160<br>舞立方的排名从一万三多干到了八千七多<br>这些进步让我感到自豪和满足。在这个过程中，我学会了如何面对挑战和解决问题<br>未来，我将继续探索新技术，慢慢提升自己的水平</p><h3 id="成长与独立生活的挑战"><a href="#成长与独立生活的挑战" class="headerlink" title="成长与独立生活的挑战"></a>成长与独立生活的挑战</h3><p>六月份，我初中毕业，没有考上高中，在佛山读了中职，并开始适应没有父母的生活<br>让我感到搞笑的是第一次买纸巾居然不会买，把普通的纸巾看成湿纸巾，这让我意识到独立生活的不易<br>在大城市里面我感受到了物价昂贵，这让我体验到了金钱的压力<br>在未来的日子里，我将继续努力适应独立生活带来的挑战，不断提高自己的独立能力</p><h3 id="软件年度总结的分享"><a href="#软件年度总结的分享" class="headerlink" title="软件年度总结的分享"></a>软件年度总结的分享</h3><p><strong><font size=4>Spotify</font></strong><br>Spotify年度歌单链接：<a href="https://open.spotify.com/playlist/37i9dQZF1Fa2KBAztBPTAx?si=D3rkv6f6TQCOe08Cxxi3Pg&pi=a-eDibFX2iTbOk&nd=1&dlsi=ea174dfd7fe34ca5">点击转跳</a></p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/2023%EF%BC%8C%E6%80%BB%E7%BB%93/1.jpg"></div><div class="group-image-wrap"><img src="/img/2023%EF%BC%8C%E6%80%BB%E7%BB%93/2.jpg"></div><div class="group-image-wrap"><img src="/img/2023%EF%BC%8C%E6%80%BB%E7%BB%93/3.jpg"></div><div class="group-image-wrap"><img src="/img/2023%EF%BC%8C%E6%80%BB%E7%BB%93/4.jpg"></div></div></div><p><strong><font size=4>QQ</font></strong></p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/2023%EF%BC%8C%E6%80%BB%E7%BB%93/5.jpg"></div><div class="group-image-wrap"><img src="/img/2023%EF%BC%8C%E6%80%BB%E7%BB%93/6.jpg"></div><div class="group-image-wrap"><img src="/img/2023%EF%BC%8C%E6%80%BB%E7%BB%93/7.jpg"></div><div class="group-image-wrap"><img src="/img/2023%EF%BC%8C%E6%80%BB%E7%BB%93/8.jpg"></div></div></div><p><strong><font size=4>闲鱼</font></strong></p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/2023%EF%BC%8C%E6%80%BB%E7%BB%93/9.jpg"></div><div class="group-image-wrap"><img src="/img/2023%EF%BC%8C%E6%80%BB%E7%BB%93/10.jpg"></div><div class="group-image-wrap"><img src="/img/2023%EF%BC%8C%E6%80%BB%E7%BB%93/11.jpg"></div><div class="group-image-wrap"><img src="/img/2023%EF%BC%8C%E6%80%BB%E7%BB%93/12.jpg"></div></div></div><p><strong><font size=4>哔哩哔哩</font></strong></p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/2023%EF%BC%8C%E6%80%BB%E7%BB%93/13.jpg"></div><div class="group-image-wrap"><img src="/img/2023%EF%BC%8C%E6%80%BB%E7%BB%93/14.jpg"></div><div class="group-image-wrap"><img src="/img/2023%EF%BC%8C%E6%80%BB%E7%BB%93/15.jpg"></div><div class="group-image-wrap"><img src="/img/2023%EF%BC%8C%E6%80%BB%E7%BB%93/16.jpg"></div></div></div><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>尽管今年充满了各种挑战和变故，但我始终保持乐观的态度，并致力于不断学习和提高自己的技能<br>我坚信，只要持续保持积极的心态和不懈的努力，就能够克服任何困难，并最终实现自己的目标<br><strong><center><font size=6>再见2023，你好2024</font></center></strong></p>]]></content>
    
    
    <categories>
      
      <category>闲谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2023</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始搭建一个免费的博客</title>
    <link href="/posts/57164/"/>
    <url>/posts/57164/</url>
    
    <content type="html"><![CDATA[<p>之前有一篇文章是跟这篇类似的，但是之前的文章写的有点乱，而且Github的速度，大家懂的都懂<br>这次是使用Github+Vercel的方案，Github当做源码储存地，Vercel当做cdn这样的速度可以大幅度提升<br>本次博客的程序还是Hexo，简单方便又快捷<br>首先准备安装环境</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">## 安装Nodejs和Git<br>apt install nodejs npm git -y<br>## 接着安装Hexo<br>npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p>准备好了环境我们就可以开始部署了，先到Github创建一个仓库把链接复制上<br><img src="/img/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%85%8D%E8%B4%B9%E7%9A%84%E5%8D%9A%E5%AE%A2/1.jpg"><br>接着创建一个文件夹存放Hexo的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 创建文件夹</span><br><span class="hljs-built_in">mkdir</span> hexo<br><span class="hljs-comment">## 进入文件夹</span><br><span class="hljs-built_in">cd</span> hexo<br></code></pre></td></tr></table></figure><p>开始部署Hexo到Github</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean">## 拉取文件<br>hexo init<br>## 安装依赖<br>npm install<br>## 安装部署程序<br>npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>我们编辑配置文件，在里面添加仓库的链接<br>配置翻译可见<a href="https://hexo.io/zh-cn/docs/configuration">Hexo官网</a></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">vi _<span class="hljs-built_in">config</span>.yml<br></code></pre></td></tr></table></figure><p>在最底下找到这段代码，把它删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br> <span class="hljs-built_in">type</span><span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>然后添加下面这段代码进去</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol"> type:</span> git<br><span class="hljs-symbol"> repo:</span> 代码库链接<br><span class="hljs-symbol"> branch:</span> main<br></code></pre></td></tr></table></figure><p><img src="/img/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%85%8D%E8%B4%B9%E7%9A%84%E5%8D%9A%E5%AE%A2/2.jpg"><br>注意: 在2021年8月13号Github不支持使用密码来提交源码，只能使用Token或者SSH提交<br>下面两个方法都有列举，推荐使用SSH来提交代码<br><strong>Token提交方法：</strong><br>进入Settings-Developer Settings-Personal access tokens-Token(classic)<br>点击Generate new token-Generate new token (classic)<br>Note可以随便填写，Expiration是有效期，然后下面的框框全选就行，全部搞好后点击Generate token就可以了，这个Token只显示一次记得保存好<br><strong>SSH提交方法：</strong><br>我们使用这个方法需要把上面的代码链接换成ssh的链接<br>我们在仓库换成SSH之后就有一个ssh的链接，我们填入即可<br><img src="/img/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%85%8D%E8%B4%B9%E7%9A%84%E5%8D%9A%E5%AE%A2/3.jpg"><br>下面开始生成ssh公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 过程回车就行</span><br>ssh-keygen -t rsa<br><span class="hljs-comment">## 显示ssh公钥</span><br><span class="hljs-built_in">cat</span> /root/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>我们把公钥复制下来，去到Github-Settings-SSH and GPG keys-New SSH key<br>Title可以随便填，Key填写我们刚才复制的公钥<br>然后点击Add SSH key就可以了<br>我们上面其中一个完成后我们设置一下Github的信息</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;你的邮箱&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;你的名字&quot;</span><br></code></pre></td></tr></table></figure><p>设置完成后我们就可以把本地代码部署到Github</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>接下来就是让Vercl当cdn，其实也不能说是cdn就是把源码放在Vercel的服务器运行就是了<br>链接：<a href="https://vercel.com/dashboard">Vercel</a><br>进入后我们Github登录就行<br>登录完后点+号，然后点击Project，它会自动获取你的Github仓库，选择你博客那个仓库点击Import，全部默认，点击Deploy就部署完成了<br>完成后我们可以把自己的域名接入，或者是使用Vercel自带的域名<br>接入域名我们点进项目主页，选择Domains，填入你的域名，点击Add<br><img src="/img/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%85%8D%E8%B4%B9%E7%9A%84%E5%8D%9A%E5%AE%A2/4.jpg"><br><img src="/img/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%85%8D%E8%B4%B9%E7%9A%84%E5%8D%9A%E5%AE%A2/5.jpg"><br>之后会有三个选项<br>第一个是添加一个www前缀的域名，把www那个域名设置为主站，如果访问没有www会自动转跳到有www的那个域名<br>第二个就是跟第一个反过来就是了<br>第三个是只添加填进去的域名<br><img src="/img/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%85%8D%E8%B4%B9%E7%9A%84%E5%8D%9A%E5%AE%A2/6.jpg"><br>添加完域名并做好解析就可以访问你的博客了</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>Hexo</tag>
      
      <tag>Vercel</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的手机不仅能用，还要好用，小米Mix2s优化日记</title>
    <link href="/posts/6896/"/>
    <url>/posts/6896/</url>
    
    <content type="html"><![CDATA[<p>我的人生第一台是诺基亚，死于屏幕<br>第二台是小米8青春版，死于摄像头，其实我不怎么开摄像头，完全可以把小米8青春版用到坏的，但是骁龙660实在是太拉了<br>第一次挑手机不会挑，就随便买了台，到了今年逛闲鱼的时候逛到了一台小米Mix2s，这台手机可是当年安兔兔跑分第一名的手机，到了现在还有很多人一直钉着(我也是)<br>手机到手我就直接刷面具root了，用了一个月，整理了一些优化的过程，大家可以跟着抄作业</p><h3 id="神秘代码，调用GPU为CPU分担压力"><a href="#神秘代码，调用GPU为CPU分担压力" class="headerlink" title="神秘代码，调用GPU为CPU分担压力"></a>神秘代码，调用GPU为CPU分担压力</h3><p>使用这个神秘代码，首先要下载Scene4，再说一遍是Scene4不是Scene5<br>下载链接: <a href="http://vtools.omarea.com/">点击转跳</a><br><img src="/img/%E6%88%91%E7%9A%84%E6%89%8B%E6%9C%BA%E4%B8%8D%E4%BB%85%E8%83%BD%E7%94%A8%EF%BC%8C%E8%BF%98%E8%A6%81%E5%A5%BD%E7%94%A8%EF%BC%8C%E5%B0%8F%E7%B1%B3Mix2s%E4%BC%98%E5%8C%96%E6%97%A5%E8%AE%B0/1.jpg"><br>不要下错了，是顶部那个<br>下载完后，第一次进入会提示安装Scene的附加模块，一定要安装，安装完后重启手机<br>再次进入，点击<strong>功能</strong>-<strong>Magisk助手</strong>，新开一行把下面的神秘代码添加进去，然后保存，重启手机</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">debug.sf.latch_unsignaled</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="/img/%E6%88%91%E7%9A%84%E6%89%8B%E6%9C%BA%E4%B8%8D%E4%BB%85%E8%83%BD%E7%94%A8%EF%BC%8C%E8%BF%98%E8%A6%81%E5%A5%BD%E7%94%A8%EF%BC%8C%E5%B0%8F%E7%B1%B3Mix2s%E4%BC%98%E5%8C%96%E6%97%A5%E8%AE%B0/2.jpg"><br><img src="/img/%E6%88%91%E7%9A%84%E6%89%8B%E6%9C%BA%E4%B8%8D%E4%BB%85%E8%83%BD%E7%94%A8%EF%BC%8C%E8%BF%98%E8%A6%81%E5%A5%BD%E7%94%A8%EF%BC%8C%E5%B0%8F%E7%B1%B3Mix2s%E4%BC%98%E5%8C%96%E6%97%A5%E8%AE%B0/3.jpg"><br>这样子就设置完成了，我们还可以再去<strong>设置</strong>-<strong>更多选项</strong>-<strong>开发者选项</strong>，找到<strong>停用HW叠加层</strong>，把这个开关打开<br>记住这个开关重启后就会关闭，需要手动打开</p><h3 id="大名鼎鼎的yc调度"><a href="#大名鼎鼎的yc调度" class="headerlink" title="大名鼎鼎的yc调度"></a>大名鼎鼎的yc调度</h3><p>众所周知MIUI的调度永远是最奇怪的，上次看到个视频，一位b站用户正在使用MIUI的备份功能，但是调度不在备份上，而是哔哩哔哩这个软件上，这哔哩哔哩估计给雷军打钱了<br>安装这个yc调度的前提是你刷了Magisk<br>yc调度的版本我逛了一圈酷安，再加上自己的测试，最后选定为<strong>DEV21.01.24</strong>这个版本，最新版我自己用了一下，好多动画都会掉帧<br>Github下载链接: <a href="https://github.com/yc9559/uperf/releases/tag/dev-21.01.24">Github</a><br>Github下载访问不了？没事，还有蓝奏云链接<br>蓝奏云下载链接: <a href="https://www.lanzoub.com/iFVS21shnbfg">蓝奏云</a><br>下载完后直接安装进Magisk里面即可，重启手机，还是刚才是软件，Scene4，我们需要用到这个软件来配置这个yc调度<br>进入<strong>Scene4</strong>-<strong>功能</strong>-<strong>性能配置</strong>，只要显示正在使用外部配置就代表已经识别yc调度了<br>大家可以跟我一样，把动态响应打开，然后全局调度调整到均衡，待机调整到省电<br><img src="/img/%E6%88%91%E7%9A%84%E6%89%8B%E6%9C%BA%E4%B8%8D%E4%BB%85%E8%83%BD%E7%94%A8%EF%BC%8C%E8%BF%98%E8%A6%81%E5%A5%BD%E7%94%A8%EF%BC%8C%E5%B0%8F%E7%B1%B3Mix2s%E4%BC%98%E5%8C%96%E6%97%A5%E8%AE%B0/4.jpg"><br>设置好动态响应后，我们返回，在性能配置的旁边找到应用场景，进去后就可以设置每个应用的模式<br>我的设置是这样子，普通的应用就设置全局默认，游戏设置为极速模式(如果玩音游会断触可以调到性能模式)，视频软件设置为省电模式<br>设置完后就直接生效了，对了记得给Scene4这个软件<strong>无障碍</strong>权限<br>推荐把Scene4转为系统应用，这样子不怕被系统杀死，我们进入到<strong>功能</strong>-<strong>应用管理</strong>-<strong>Scene4</strong>，长按然后有一个转为系统应用的选项，转完后给Scene4一个自启动的选项，这样子就可以开机自启动了<br>一系列设置完后就不怕MIUI的神奇调度了</p><h3 id="冰箱冻住云控"><a href="#冰箱冻住云控" class="headerlink" title="冰箱冻住云控"></a>冰箱冻住云控</h3><p>众所周知，雷军和金凡为了让米粉们每年换一台新机，所以做了云控这个软件，这个软件名字叫做Joyose，有了这个软件雷军和金凡都可以远程施法<br><strong>自动开机关机，重启再死机</strong><br><strong>死机死机都死机</strong><br>为了防止雷军和金凡远程死机，我们可以下载<strong>冰箱</strong>这个软件<br>下载链接: <a href="https://www.coolapk.com/apk/com.catchingnow.icebox">酷安</a><br>下载完后打开需要获取root权限，获取完就可以使用了，打开<strong>冰箱</strong>-<strong>APP</strong>-<strong>系统</strong>，在这里面搜索joyose，然后长按选择<strong>添加到冰箱列表</strong>即可<br><img src="/img/%E6%88%91%E7%9A%84%E6%89%8B%E6%9C%BA%E4%B8%8D%E4%BB%85%E8%83%BD%E7%94%A8%EF%BC%8C%E8%BF%98%E8%A6%81%E5%A5%BD%E7%94%A8%EF%BC%8C%E5%B0%8F%E7%B1%B3Mix2s%E4%BC%98%E5%8C%96%E6%97%A5%E8%AE%B0/5.jpg"></p><h3 id="一些Magisk模块"><a href="#一些Magisk模块" class="headerlink" title="一些Magisk模块"></a>一些Magisk模块</h3><p>第一个是调整Mix2s双扬声器的模块<br>模块介绍: 略微下调底部扬声器音量，上调听筒的音量<br>第二个是修改zram调度的模块<br>模块介绍: 845更改ZRAM调度积极性以及调整大小<br><strong>注意: 2023年，毒瘤软件越来越多，如果刷了这个模块导致卡顿，请卸载这个模块</strong><br>下载链接: <a href="https://www.lanzoub.com/b01wvffrc">蓝奏云</a><br>密码:6kmk<br>这个链接包含了这篇文章的全部模块文件<br>这部手机我最近都爱不释手，毕竟就像小米官方说的<strong>一面科技，一面艺术</strong><br>唯一的缺点就是电池续航不行，其他都还好<br>电池的话可以换一个四千毫安的电池，最近有空再来折腾</p>]]></content>
    
    
    <categories>
      
      <category>折腾日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小米Mix2s</tag>
      
      <tag>Magisk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>J3160的折腾日记，安装黑群晖</title>
    <link href="/posts/61249/"/>
    <url>/posts/61249/</url>
    
    <content type="html"><![CDATA[<p>本篇文章是结合了之前的两篇文章写的，由于之前两篇文章写的有点仓促，所以把两篇文章结合成一篇<br>这次的主角是J3160，在闲鱼看了几天最后用九十五元包邮拿下这块板子<br><img src="/img/J3160%E7%9A%84%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0%EF%BC%8C%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/1.jpg"><br>机箱我之前用的是1U的机箱，家用不行，所以换了个新机箱，这个机箱是台科中电的H2款(没听过这个牌子，能用就行)<br><img src="/img/J3160%E7%9A%84%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0%EF%BC%8C%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/2.jpg"><br>电源直接去买拆机电源就行了，买电源记得计算全部功率多少，不然带不动就尴尬了<br><img src="/img/J3160%E7%9A%84%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0%EF%BC%8C%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/3.jpg"><br>最后装起来是这样子，看着还挺酷<br><img src="/img/J3160%E7%9A%84%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0%EF%BC%8C%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/4.jpg"><br><img src="/img/J3160%E7%9A%84%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0%EF%BC%8C%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/5.jpg" alt="点亮后"><br>下面就是安装黑群晖的过程<br>黑群晖的引导我们可以使用arpl(Automated Redpill Loader)引导，全自动，只需要自己选择型号和版本<br>多语言版已经删库，请使用原版来安装<br>链接: <a href="https://github.com/fbelavenuto/arpl">Github</a><br>进入到Releases，把镜像下载下来，然后进行写盘，把写好到u盘插入主机usb口，接着把u盘设置为启动第一项，保存设置，再启动一次,主机就可以进入arpl的引导界面了<br>第一次进入的话需要编译一下引导，我们可以在屏幕上看到一串网站<br><img src="/img/J3160%E7%9A%84%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0%EF%BC%8C%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/6.jpg"><br>我们把这串网站输入进浏览器，然后我们就可以配置arpl的引导了<br><img src="/img/J3160%E7%9A%84%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0%EF%BC%8C%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/7.png"><br>进去后默认在第一个选项，这个选项是选择黑群晖机型的<br>喜欢那个选哪个，我这里选了最常见的机型DS918+<br><img src="/img/J3160%E7%9A%84%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0%EF%BC%8C%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/8.png"><br>选好了机型接着就是版本号，版本号我们可以在群晖的官网里面看，里面有写哪个版本号对应哪个版本<br>链接: <a href="https://www.synology.cn/zh-cn/support/download/DS918+">群晖下载中心</a><br><img src="/img/J3160%E7%9A%84%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0%EF%BC%8C%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/9.png"><br><img src="/img/J3160%E7%9A%84%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0%EF%BC%8C%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/10.png"><br>这里我选择了最新的dsm版本<br><img src="/img/J3160%E7%9A%84%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0%EF%BC%8C%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/21.png"><br>如果需要修改sn码和mac的话可以进入<strong>Cmdline menu</strong><br><img src="/img/J3160%E7%9A%84%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0%EF%BC%8C%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/18.png"><br>其中<strong>Define a serial number</strong>是修改sn码的选项，<strong>Define a custom MAC</strong>是修改mac的选项<br><img src="/img/J3160%E7%9A%84%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0%EF%BC%8C%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/19.png"><br>全部完成后我们就可以选择<strong>Build the loader</strong>,开始编译镜像<br><img src="/img/J3160%E7%9A%84%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0%EF%BC%8C%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/20.png"><br>速度还是挺快的，如果失败可以多编译几次<br><img src="/img/J3160%E7%9A%84%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0%EF%BC%8C%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/11.png"><br>编译完成后我们选择<strong>Boot the loader</strong>这个选项，这样子就可以启动黑群晖了，我们可以在Booting界面看到群晖的IP地址<br><img src="/img/J3160%E7%9A%84%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0%EF%BC%8C%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/22.png"><br><img src="/img/J3160%E7%9A%84%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0%EF%BC%8C%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/12.png"><br>这是群晖的安装界面，我们点击<strong>安装</strong><br><img src="/img/J3160%E7%9A%84%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0%EF%BC%8C%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/13.png"><br>接着就是安装dsm系统了，如果刚才编译的版本是最新的版本两个选项都可以选，如果不是编译最新版本的只能自己上传系统<br><img src="/img/J3160%E7%9A%84%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0%EF%BC%8C%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/14.png"><br>重启过后就是创建账号什么的，很简单的<br><img src="/img/J3160%E7%9A%84%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0%EF%BC%8C%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/15.png"><br><img src="/img/J3160%E7%9A%84%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0%EF%BC%8C%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/16.png"><br><img src="/img/J3160%E7%9A%84%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0%EF%BC%8C%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/17.png"><br>到这里就全部折腾好了，大家可以自己来抄作业</p>]]></content>
    
    
    <categories>
      
      <category>折腾日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>黑群晖</tag>
      
      <tag>arpl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PVE的优化过程</title>
    <link href="/posts/56512/"/>
    <url>/posts/56512/</url>
    
    <content type="html"><![CDATA[<p>本人安装完PVE后，感觉有些东西没达到自己的想法，所以写了这篇文章，把自己优化PVE是过程记录了下来</p><h3 id="PVE更换国内源"><a href="#PVE更换国内源" class="headerlink" title="PVE更换国内源"></a>PVE更换国内源</h3><p>众所周知，这些比较<strong>牛逼</strong>的软件一般都是国外大佬开发的，国外大佬开发的软件有个缺点就是这些下载源什么的都在国外，国内容易404<br>换国内源我用的是<strong>pvetools</strong><br>项目链接: <a href="https://github.com/ivanhao/pvetools">Github</a><br>我们先删除企业源</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">rm /etc/apt/sources<span class="hljs-meta">.list</span>.d/pve-enterprise<span class="hljs-meta">.list</span><br></code></pre></td></tr></table></figure><p>接着我们进入项目链接，点击<strong>Code</strong>，然后我们再点击<strong>Download ZIP</strong>，然后我们把这个文件上传到pve上面<br>这里推荐下载到本地，然后解压，再压缩成<strong>tar</strong>的文件，接着上传到pve<br>这样子做的目的就是可以直接解压，因为pve不自带<strong>zip</strong>文件解压缩软件，只能支持<strong>tar</strong>解压缩软件<br>tar文件解压命令</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">tar -xvf 文件名<span class="hljs-string">.tar</span><br></code></pre></td></tr></table></figure><p>解压完成后我们赋予这个文件可读写执行的权限</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> <span class="hljs-number">777</span> -R 解压的文件夹名称<br></code></pre></td></tr></table></figure><p>接着我们进入pvetools目录，执行pvetools</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> 解压的文件夹名称<br>./pvetools.sh<br></code></pre></td></tr></table></figure><p>语言选择中文，然后选择第一项，这里推荐使用阿里云源<br>然后就会自动更新全部的源，推荐更新完源后把软件也更新一下<code>apt upgrade -y</code></p><h3 id="显示CPU频率，风扇速度…"><a href="#显示CPU频率，风扇速度…" class="headerlink" title="显示CPU频率，风扇速度…"></a>显示CPU频率，风扇速度…</h3><p>其实这个在pvetools可以设置，但是并不美观，所以我找了一个恩山大佬开发的一个脚本<br>项目链接：<a href="https://www.right.com.cn/FORUM/forum.php?mod=viewthread&tid=6754687">恩山论坛</a><br>同样，我们进入里面下载压缩包，如果你已经操作完换源的步骤你可以直接把zip文件上传到pve里面<br>安装zip解压缩软件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">apt <span class="hljs-keyword">install</span> zip unzip -y <br></code></pre></td></tr></table></figure><p>接着解压刚刚上传的文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">unzip</span> showtempcpufreq.zip<br></code></pre></td></tr></table></figure><p>然后赋予权限，并执行这个脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x showtempcpufreq.sh<br>./showtempcpufreq.sh<br></code></pre></td></tr></table></figure><p>如果之前安装过其他类似的脚本可以用以下命令还原</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">apt <span class="hljs-keyword">update</span> <span class="hljs-variable">&amp;&amp;</span> apt reinstall pve-manager<br></code></pre></td></tr></table></figure><p>如果不满意的话可以用重置命令还原</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">./showtempcpufreq.<span class="hljs-keyword">sh</span> <span class="hljs-keyword">restore</span><br></code></pre></td></tr></table></figure><h3 id="修改PVE节点名称"><a href="#修改PVE节点名称" class="headerlink" title="修改PVE节点名称"></a>修改PVE节点名称</h3><p>pve安装完成后节点名称默认为pve，如果要修改节点名称推荐空环境，就是安装了pve，但是没有安装虚拟机<br>首先我们修改hosts文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>hosts<br></code></pre></td></tr></table></figure><p>把里面的pve修改成你喜欢的名称<br>如果vim编辑器有点奇奇怪怪的可以重新安装一下vim编辑器<code>apt install vim -y</code><br>修改完hosts文件后，我们修改主机名称</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> 新名字<br></code></pre></td></tr></table></figure><p>接着我们使用<code>reboot</code>重启pve<br>重启完成之后我们用复制命令把就节点复制新节点</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp -r <span class="hljs-regexp">/etc/</span>pve<span class="hljs-regexp">/nodes/</span>pve <span class="hljs-regexp">/etc/</span>pve<span class="hljs-regexp">/nodes/</span>新名称<br></code></pre></td></tr></table></figure><p>然后打开pve的管理界面就可以看见新名称了<br>接着我们再删除旧的节点</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rm -fr <span class="hljs-regexp">/etc/</span>pve<span class="hljs-regexp">/nodes/</span>pve/<br></code></pre></td></tr></table></figure><h3 id="PVE把local-lvm合并到local"><a href="#PVE把local-lvm合并到local" class="headerlink" title="PVE把local-lvm合并到local"></a>PVE把local-lvm合并到local</h3><p>我们在安装pve的时候，pve会自动分配一些空间给local和local-lvm，local-lvm就是我们存储虚拟机的位置，而local是存储镜像的位置，我安装的时候他分配了100g的空间给我的local，感觉有点浪费，然后在恩山论坛上找到一个方法<br>原贴链接: <a href="https://www.right.com.cn/forum/thread-3513183-1-1.html">恩山论坛</a><br>下面开始实操<br>合并空间最好是刚刚安装完pve的时候合并，如果你在pve安装了虚拟机，那么我们可以将虚拟机备份到另一个硬盘上<br>备份完成之后，跟着下面步骤操作即可<br>首先删除local-lvm</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">lvremove</span> pve/<span class="hljs-class"><span class="hljs-keyword">data</span></span><br></code></pre></td></tr></table></figure><p>接着把local-lvm空间分配给local</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">lvextend</span> -l +<span class="hljs-number">100</span>%FREE -r pve/root<br></code></pre></td></tr></table></figure><p>接着我们到pve那里把local-lvm存储删除即可，然后编辑local空间，把<strong>磁盘映像</strong>和<strong>容器</strong>选择上</p><h3 id="让CPU自动调节频率"><a href="#让CPU自动调节频率" class="headerlink" title="让CPU自动调节频率"></a>让CPU自动调节频率</h3><p>pve安装完CPU的模式默认是<strong>性能模式</strong>，这样子会造成不必要的电费浪费<br>我们为了环保，所以可以用下面的方法让CPU自动调节频率<br>首先安装<strong>cpufrequtils</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">apt <span class="hljs-keyword">install</span> cpufrequtils -y<br></code></pre></td></tr></table></figure><p>接着我们创建一个文件并编辑</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">vi <span class="hljs-regexp">/etc/</span><span class="hljs-keyword">default</span>/cpufrequtils<br></code></pre></td></tr></table></figure><p>在里面写入下面内容</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><br><span class="hljs-attribute">GOVERNOR</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;ondemand&quot;</span><br></code></pre></td></tr></table></figure><p>然后重启一下cpufrequtils服务即可</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart cpufrequtils</span><br></code></pre></td></tr></table></figure><h3 id="在虚拟机里面安装Qemu-Guest-Agent"><a href="#在虚拟机里面安装Qemu-Guest-Agent" class="headerlink" title="在虚拟机里面安装Qemu Guest Agent"></a>在虚拟机里面安装Qemu Guest Agent</h3><p>Qemu Guest Agent是一个能让宿主机和虚拟机联通的一个软件，就像VM的vmtools一样</p><p>Linux安装方法</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># apt管理器安装命令:</span><br>apt <span class="hljs-keyword">install</span> qemu-guest-agent<br><span class="hljs-comment"># yum管理器安装命令:</span><br>yum <span class="hljs-keyword">install</span> qemu-guest-agent<br></code></pre></td></tr></table></figure><p>安装完成之后进入pve，先把虚拟机关机，然后在选项里面编辑Qemu Guest Agent，勾选第一项，接着保存并开机<br>开机完成之后能看见IP地址什么的就证明安装成功了<br>Windows安装方法<br>网上的教程一般都是要去更新pcie驱动，其实不用，我们先把<strong>virtio-win.iso</strong>镜像挂载到Windows的里面<br>我们先关闭Windows虚拟机，然后在硬件里面选择添加，添加<strong>CD&#x2F;DVD驱动器</strong>，然后镜像选择<strong>virtio-win.iso</strong><br>virtio-win的下载链接: <a href="https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso">点击转跳</a><br>挂载完成后启动Windows虚拟机，在<strong>此电脑</strong>里面双击<strong>CD&#x2F;DVD驱动器</strong>，然后打开<strong>virtio-win-guest-tools</strong>接着安装即可<br>安装完成后把Windows关机，然后同样在选项里面把Qemu Guest Agent的第一项勾选上，这样子就装好Qemu Guest Agent了</p>]]></content>
    
    
    <categories>
      
      <category>折腾日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PVE</tag>
      
      <tag>Windows</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>未成年在国内搭建网站有多麻烦</title>
    <link href="/posts/15437/"/>
    <url>/posts/15437/</url>
    
    <content type="html"><![CDATA[<p>本人是在上初三的初中生，今年十五岁，今天来吐槽吐槽没有成年的人，在国内搭建一个网站有多困难<br>首先是域名，域名的话只要有身份证就可以实名认证，然而我并没有，使用只能使用外国的域名商，外国的域名商好处就是不用实名，同样也有缺点，有些域名商不能使用<strong>支付宝</strong>支付<br>再来就是网站服务器，服务器这个容易，在阿里，腾讯什么的七十多就可以买一年服务器，很便宜，买完服务器后你会发现，如果要使用<strong>80，443</strong>这两个端口就要备案<br>下面这张图是腾讯云的备案流程，跟其他云的备案流程基本一致<br><img src="/img/%E6%9C%AA%E6%88%90%E5%B9%B4%E5%9C%A8%E5%9B%BD%E5%86%85%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99%E6%9C%89%E5%A4%9A%E9%BA%BB%E7%83%A6/2.jpg"><br>大概要一个月左右，才可以看到你自己的网站<br>记住，这只对成年人有效，对的，未成年人不能备案，如果你坚持要备案只能用父母的身份去备案<br>到这里，如果没遇到什么情况的话你的网站就在国内搭建完成了<br>搭建完后，你要了解什么东西该发什么东西不该发，如果你一顿乱操作可能会去警局喝茶<br>所以在国内建站的唯一好处可能就是<strong>快</strong>了，相对的，国内建站限制比较多<br>那么我的博客是怎么建起来的，这里要感谢万能的Github Page还有CDN服务商<br>我的域名是在国外买的，然后托管到CloudFlare，为了就是方便管理<br><img src="/img/%E6%9C%AA%E6%88%90%E5%B9%B4%E5%9C%A8%E5%9B%BD%E5%86%85%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99%E6%9C%89%E5%A4%9A%E9%BA%BB%E7%83%A6/3.jpg"><br>博客用的是<strong>Hexo</strong>，可以直接静态部署到Github Page，再加个CDN美滋滋<br>如果你是未成年想建站，可以参考我的建站方法</p>]]></content>
    
    
    <categories>
      
      <category>闲谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>建站</tag>
      
      <tag>未成年</tag>
      
      <tag>CloudFlare</tag>
      
      <tag>CDN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>群晖Docker搭建蒲公英网络实现内网穿透</title>
    <link href="/posts/28228/"/>
    <url>/posts/28228/</url>
    
    <content type="html"><![CDATA[<p>最近搭建完黑群晖后一直在寻求怎么样可以外网访问黑群晖，有人说，群晖不是自带QC吗，其实群晖的QC速度非常慢，慢到离谱，而且我搭建的是黑群晖，白嫖了人家的系统，已经够知足了<br>下面是我自己找到的几种方法<br>1.公网IP<br>2.SakuraFrp<br>3.节点小宝<br>4.蒲公英<br>首先来说说公网IP，现在很多地方都不肯给公网IP了，有些地区的公网IP甚至要加钱，我家更不用说了，垃圾广电<br>再来就是SakuraFrp，SakuraFrp现在每月会自动把流量清空，国内节点要备案(这是肯定的)，国外节点基本不是被墙，就是被墙的路上<br>节点小宝这个不错，开箱就用，但是只有群晖平台，有些功能要使用Windows下载软件使用<br>最后就是蒲公英了，蒲公英用了一段时间，感觉不错，蒲公英就是虚拟组网，使用连接软件把群晖和手机连接在一个网段上<br>下面的搭建教程，这里分为Debian Docker搭建和群晖Docker搭建<br>Debian是因为在外面有时候需要远程控制项目，所以才在Debian搭建(Centos和Ububtu…..都可以根据下面的教程搭建)<br>在Debian搭建的话需要提前安装Docker(废话…)<br>首先拉取蒲公英的Docker镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull bestoray/pgyenterprise<br></code></pre></td></tr></table></figure><p>拉取完成我们创建一个容器</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -d --name pgyvpn <span class="hljs-attribute">--device</span>=/dev/net/tun <span class="hljs-attribute">--net</span>=host <span class="hljs-attribute">--cap-add</span>=NET_ADMIN --env <span class="hljs-attribute">PGY_USERNAME</span>=<span class="hljs-string">&quot;xxx&quot;</span> --env <span class="hljs-attribute">PGY_PASSWORD</span>=<span class="hljs-string">&quot;xxx&quot;</span> bestoray/pgyenterprise<br></code></pre></td></tr></table></figure><p>其中<strong>PGY_USERNAME</strong>和<strong>PGY_PASSWORD</strong>分别是你注册蒲公英时的手机号和密码<br>新建容器完成后我们可以进入容器，然后登陆一下，看看有没有登陆成功</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> pgyvpn bash<br>pgyvpn<br></code></pre></td></tr></table></figure><p><img src="/img/%E7%BE%A4%E6%99%96Docker%E6%90%AD%E5%BB%BA%E8%92%B2%E5%85%AC%E8%8B%B1%E7%BD%91%E7%BB%9C%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/2.jpg"><br>这样子就是登陆成功了<br>我们可以通过输入<strong>9</strong>来切换语言<br>接下来是群晖的安装教程，我们进入群晖的界面，在套件中心搜索docker并安装<br><img src="/img/%E7%BE%A4%E6%99%96Docker%E6%90%AD%E5%BB%BA%E8%92%B2%E5%85%AC%E8%8B%B1%E7%BD%91%E7%BB%9C%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/3.png"><br>安装完Docker后我们打开，在<strong>注册表</strong>搜索<code>bestoray/pgyvpn</code>，把这个映像下载下来<br>下载完成后，打开<strong>映像</strong>，然后选择刚才的映像点启动<br>我们先点<strong>配置功能</strong>，在里面把NET_ADMIN勾选上<br><img src="/img/%E7%BE%A4%E6%99%96Docker%E6%90%AD%E5%BB%BA%E8%92%B2%E5%85%AC%E8%8B%B1%E7%BD%91%E7%BB%9C%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/4.png"><br>然后在<strong>高级设置</strong>内勾选<strong>启用自动重新启动</strong>，这样子重启群晖的时候就会自动启动容器<br><img src="/img/%E7%BE%A4%E6%99%96Docker%E6%90%AD%E5%BB%BA%E8%92%B2%E5%85%AC%E8%8B%B1%E7%BD%91%E7%BB%9C%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/5.png"><br>接着我们在<strong>网络</strong>内勾选<strong>使用与Docker Host相同的网络</strong><br><img src="/img/%E7%BE%A4%E6%99%96Docker%E6%90%AD%E5%BB%BA%E8%92%B2%E5%85%AC%E8%8B%B1%E7%BD%91%E7%BB%9C%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/6.png"><br>最后在<strong>环境</strong>里面创建一个PGY_USERNAME和PGY_PASSWORD的变量，分别填入手机号和密码<br><img src="/img/%E7%BE%A4%E6%99%96Docker%E6%90%AD%E5%BB%BA%E8%92%B2%E5%85%AC%E8%8B%B1%E7%BD%91%E7%BB%9C%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/7.png"><br>然后无脑的应用，应用，容器就创建成功了<br>完成了安装后，我们可以去蒲公英官网下载连接软件<br>链接：<a href="https://pgy.oray.com/download/">点击转跳</a><br>下载，安装，打开，登陆账号，点击连接，就可以和你的设备处于同一个网络内了</p>]]></content>
    
    
    <categories>
      
      <category>折腾日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>黑群晖</tag>
      
      <tag>蒲公英</tag>
      
      <tag>虚拟组网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DSM7.0+使用透明登陆卡片</title>
    <link href="/posts/44039/"/>
    <url>/posts/44039/</url>
    
    <content type="html"><![CDATA[<p>在上一篇文章讲了搭建黑群晖的方法，然后我发现群晖登陆界面的小卡片有点挡壁纸，要是透明就好看多了<br>项目链接: <a href="https://github.com/onlypeng/dsm7_login_translucent">Github</a><br>如果访问不了的话，下面是我自己上传的<br>下载: <a href="https://www.123pan.com/s/uH08Vv-mLIJH.html">123云盘</a><br>接着我们把下载到的文件上床…上传到一个目录里面<br><img src="/img/DSM70%E4%BD%BF%E7%94%A8%E9%80%8F%E6%98%8E%E7%99%BB%E9%99%86%E5%8D%A1%E7%89%87/2.png"><br>我们选择属性，把位置复制下来<br><img src="/img/DSM70%E4%BD%BF%E7%94%A8%E9%80%8F%E6%98%8E%E7%99%BB%E9%99%86%E5%8D%A1%E7%89%87/3.png"><br><img src="/img/DSM70%E4%BD%BF%E7%94%A8%E9%80%8F%E6%98%8E%E7%99%BB%E9%99%86%E5%8D%A1%E7%89%87/4.png"><br>复制完成后我们打开控制面板，选择<strong>终端机和SNMP</strong>，在里面我们把ssh打开<br><img src="/img/DSM70%E4%BD%BF%E7%94%A8%E9%80%8F%E6%98%8E%E7%99%BB%E9%99%86%E5%8D%A1%E7%89%87/5.png"><br><img src="/img/DSM70%E4%BD%BF%E7%94%A8%E9%80%8F%E6%98%8E%E7%99%BB%E9%99%86%E5%8D%A1%E7%89%87/6.png"><br>接着我们登陆ssh，ssh的用户名是你群晖的用户名，密码是群晖的密码<br>登陆上后我们切换<code>root</code>用户</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sudo -<span class="hljs-selector-tag">i</span><br></code></pre></td></tr></table></figure><p><img src="/img/DSM70%E4%BD%BF%E7%94%A8%E9%80%8F%E6%98%8E%E7%99%BB%E9%99%86%E5%8D%A1%E7%89%87/7.jpg"><br>接着我们进入到刚才复制目录的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> 复制的位置<br></code></pre></td></tr></table></figure><p>这里分为三个版本，请根据你的DSM版本选择<br><img src="/img/DSM70%E4%BD%BF%E7%94%A8%E9%80%8F%E6%98%8E%E7%99%BB%E9%99%86%E5%8D%A1%E7%89%87/8.jpg"><br>选择完成后我们运行脚本，然后选择<strong>1</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./install.sh<br></code></pre></td></tr></table></figure><p><img src="/img/DSM70%E4%BD%BF%E7%94%A8%E9%80%8F%E6%98%8E%E7%99%BB%E9%99%86%E5%8D%A1%E7%89%87/9.jpg"><br>这样子我们就修改完成了，现在可以去看看你的登陆界面了，是不是很漂亮<br><img src="/img/DSM70%E4%BD%BF%E7%94%A8%E9%80%8F%E6%98%8E%E7%99%BB%E9%99%86%E5%8D%A1%E7%89%87/1.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>折腾日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DSM</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Gulp压缩我的博客</title>
    <link href="/posts/9756/"/>
    <url>/posts/9756/</url>
    
    <content type="html"><![CDATA[<p>在<a href="https://bricawa.com/posts/39939/">使用Github免费白嫖一个博客</a>这篇文章中，我讲述了如何使用Hexo搭建博客，并白嫖Github的托管功能<br>在搭建完后，我尝试访问博客时，感觉博客网站有点慢<br>经过研究后发现了两个问题</p><h3 id="服务器地理位置"><a href="#服务器地理位置" class="headerlink" title="服务器地理位置"></a>服务器地理位置</h3><p>因为Github的服务器在国外，所以懂的都懂</p><h3 id="博客图片过大"><a href="#博客图片过大" class="headerlink" title="博客图片过大"></a>博客图片过大</h3><p>博客最重要的就是图片，导致加载慢的原因也有可能是图片，我们可以把图片托管在图床上，或者是压缩图片，使图片变小</p><h3 id="html，js，css未压缩"><a href="#html，js，css未压缩" class="headerlink" title="html，js，css未压缩"></a>html，js，css未压缩</h3><p>Hexo博客生成静态文件后我们可以通过查看<strong>public</strong>文件夹里面的html，js，css文件<br>我们可以发现这些文件里面含有很多空格<br>下面是对比图<br><img src="/img/%E4%BD%BF%E7%94%A8Gulp%E5%8E%8B%E7%BC%A9%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/2.jpg" alt="未压缩"><br><img src="/img/%E4%BD%BF%E7%94%A8Gulp%E5%8E%8B%E7%BC%A9%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/3.jpg" alt="已压缩"><br>通过这两张图片我们就可以知道，Hexo生成静态文件有很多空格，在百度了一会儿后找到了解决方法<br>我们可以使用gulp来压缩这些静态文件<br>我们进入博客目录开始安装gulp</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">cnpm install gulp <span class="hljs-comment">--g</span><br>cnpm install gulp gulp-clean-css gulp-uglify gulp-htmlmin gulp-htmlclean <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>如果没有安装cnpm可以用下面的命令安装，用npm的效果也是一样的</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">npm install -g cnpm <span class="hljs-params">--registry=https</span>:<span class="hljs-string">//registry.npmmirror.com</span><br></code></pre></td></tr></table></figure><p>安装完gulp后，我们在博客目录新建一个文件<code>gulpfile.js</code><br><code>touch gulpfile.js</code><br>然后把下面的配置命令写入<code>gulpfile.js</code>文件里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入需要的模块</span><br><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>);<br><span class="hljs-keyword">var</span> minifycss = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-clean-css&#x27;</span>);<br><span class="hljs-keyword">var</span> uglify = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-uglify&#x27;</span>);<br><span class="hljs-keyword">var</span> htmlmin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-htmlmin&#x27;</span>);<br><span class="hljs-keyword">var</span> htmlclean = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-htmlclean&#x27;</span>);<br><span class="hljs-comment">// 压缩html</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;minify-html&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> gulp.<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;./public/**/*.html&#x27;</span>)<br>        .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">htmlclean</span>())<br>        .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">htmlmin</span>(&#123;<br>            <span class="hljs-attr">removeComments</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">minifyJS</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">minifyCSS</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">minifyURLs</span>: <span class="hljs-literal">true</span>,<br>        &#125;))<br>        .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;./public/&#x27;</span>))<br>&#125;);<br><span class="hljs-comment">// 压缩css</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;minify-css&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> gulp.<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;./public/**/*.css&#x27;</span>)<br>        .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">minifycss</span>(&#123;<br>            <span class="hljs-attr">compatibility</span>: <span class="hljs-string">&#x27;ie8&#x27;</span><br>        &#125;))<br>        .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;./public/&#x27;</span>));<br>&#125;);<br><span class="hljs-comment">// 压缩js</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;minify-js&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> gulp.<span class="hljs-title function_">src</span>([<span class="hljs-string">&#x27;./public/**/*.js&#x27;</span>])<br>        .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">uglify</span>())<br>        .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;./public/&#x27;</span>));<br>&#125;);<br><span class="hljs-comment">// 默认任务</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;default&#x27;</span>, gulp.<span class="hljs-title function_">parallel</span>(<span class="hljs-string">&#x27;minify-html&#x27;</span>,<span class="hljs-string">&#x27;minify-css&#x27;</span>,<span class="hljs-string">&#x27;minify-js&#x27;</span><br>));<br></code></pre></td></tr></table></figure><p><strong>一般的Hexo程序就用我上面的来压缩即可，不需要改动</strong><br>写入后保存并退出，然后我们执行<code>gulp</code>进行压缩<br><img src="/img/%E4%BD%BF%E7%94%A8Gulp%E5%8E%8B%E7%BC%A9%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/4.jpg"><br>这样子就是压缩成功了<br>如果你的Hexo是运行于Nginx上的还可以进行gzip压缩<br>打开Nginx的站点配置</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">vi <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/sites-enabled/</span><span class="hljs-keyword">default</span><br></code></pre></td></tr></table></figure><p>我们把下面内容添加进<strong>server</strong>块里面</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 开启gzip</span><br>gzip  <span class="hljs-keyword">on</span>;  <br><span class="hljs-comment"># 低于1kb的资源不压缩 </span><br>gzip_min_length <span class="hljs-number">1</span>k;<br><span class="hljs-comment"># 压缩级别1-9,越大压缩率越高,同时消耗cpu资源也越多，建议设置在5左右</span><br>gzip_comp_level <span class="hljs-number">5</span>; <br><span class="hljs-comment"># 需要压缩哪些响应类型的资源,多个空格隔开.不建议压缩图片</span><br>gzip_types <span class="hljs-built_in">text</span>/plain <span class="hljs-built_in">application</span>/javascript <span class="hljs-built_in">application</span>/x-javascript <span class="hljs-built_in">text</span>/javascript <span class="hljs-built_in">text</span>/xml <span class="hljs-built_in">text</span>/css;  <br><span class="hljs-comment"># 配置禁用gzip条件,支持正则.此处表示ie6及以下不启用gzip(因为ie低版本不支持)</span><br>gzip_disable <span class="hljs-string">&quot;MSIE [1-6]\.&quot;</span>;  <br><span class="hljs-comment"># 是否添加“Vary: Accept-Encoding”响应头</span><br>gzip_vary <span class="hljs-keyword">on</span>;<br></code></pre></td></tr></table></figure><p>添加完后我们保存并退出，再重启一下Nginx</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service nginx restart</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>Hexo</tag>
      
      <tag>Gulp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Clash给Switch加速</title>
    <link href="/posts/64373/"/>
    <url>/posts/64373/</url>
    
    <content type="html"><![CDATA[<p>在<a href="https://bricawa.com/posts/8260/">Switch Lite购买感受和建议</a>这篇文章，里面有说过怎么解决Switch下载游戏慢的问题，就是改DNS<br>有些人改了DNS后还是有点毛病，所以我们可以使用Clash给Switch加速<br>这篇文章需要亿点点<strong>Linux</strong>基础才可以看懂<br>在此之前需要准备一些环境<br>机场，<strong>Linux</strong>系统的机器，手，脑子<br>机场这里不做推荐，避免有人说恰饭<br>我们准备好后可以开始搭建<br>首先去Github上获取Clash<br>链接：<a href="https://github.com/Dreamacro/clash/releases">https://github.com/Dreamacro/clash/releases</a><br><img src="/img/%E4%BD%BF%E7%94%A8Clash%E7%BB%99Switch%E5%8A%A0%E9%80%9F/2.jpg"><br>我的机器是<strong>64位系统</strong>的，所以我们以<strong>clash-linux-amd64-v1.11.8.gz</strong>这个版本为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /root/.config/clash<br><span class="hljs-built_in">cd</span> /root/.config/clash<br>wget https://github.com/Dreamacro/clash/releases/download/v1.11.8/clash-linux-amd64-v1.11.8.gz<br>gunzip clash-linux-amd64-v1.11.8.gz<br><span class="hljs-built_in">mv</span> clash-linux-amd64-v1.11.8 clash<br><span class="hljs-built_in">chmod</span> +x clash<br></code></pre></td></tr></table></figure><p>第三行的链接请根据你的系统版本更换<br>第四，五行的文件名字请根据你下载到的文件名进行更换<br><strong>第一行创建文件夹的命令一定要跟我一样</strong><br>接着就是把你的<strong>订阅配置</strong>下载到这个目录(&#x2F;root&#x2F;.config&#x2F;clash)</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">wget -P /root/.config/clash -O config.yaml <span class="hljs-string">&quot;运营商提供的订阅链接&quot;</span><br></code></pre></td></tr></table></figure><p>接着我们启动Clash<br><img src="/img/%E4%BD%BF%E7%94%A8Clash%E7%BB%99Switch%E5%8A%A0%E9%80%9F/3.jpg"><br>这样子就是成功了，提示的信息可能会有点出入，请自己甄别<br>我们按<strong>Ctrl+C</strong>停止程序<br>接着我们把Clash添加进开机自启动服务</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/</span>clash.service<br></code></pre></td></tr></table></figure><p>创建一个服务文件，接着把下面的代码添加进去即可</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=Clash service<br><span class="hljs-attr">After</span>=network.target<br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Type</span>=simple<br><span class="hljs-attr">User</span>=root<br><span class="hljs-attr">ExecStart</span>=/root/.config/clash/clash<br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p>添加完后保存</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl daemon-reload<br><span class="hljs-params">system</span>ctl enable clash.service<br><span class="hljs-params">system</span>ctl restart clash.service<br></code></pre></td></tr></table></figure><p>把三行命令打进去，这样子就可以开机自启动了<br>接下来是Switch配置，我们打开设置-互联网-互联网设置-选择和服务器同一个网络-更改设置<br>然后我们把<strong>代理服务器设置</strong>选择启用，服务器选择你服务器的IP，端口填7890(前提是没更改过，默认都是这个端口)，自动验证选择不起用<br>最后连接网络即可<br><img src="/img/%E4%BD%BF%E7%94%A8Clash%E7%BB%99Switch%E5%8A%A0%E9%80%9F/4.jpg"><br><img src="/img/%E4%BD%BF%E7%94%A8Clash%E7%BB%99Switch%E5%8A%A0%E9%80%9F/5.jpg"><br>听不懂的可以根据图片进行操作，感觉速度不错<br>到这里就完事了<br>如果手机需要连上代理的话也是这么填<br><img src="/img/%E4%BD%BF%E7%94%A8Clash%E7%BB%99Switch%E5%8A%A0%E9%80%9F/6.jpg"><br>非必须：<br>如果需要控制Clash的节点的话我们可以安装一个面板<br>方法一Docker安装(需要安装Docker):</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -p 8000:80 -d --name yacd <span class="hljs-attribute">--restart</span>=always haishanh/yacd:latest<br></code></pre></td></tr></table></figure><p>接着访问<strong>IP:8000</strong>即可<br>方法二Nginx运行(需要安装Nginx):</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/haishanh/yacd.git 网站目录<br></code></pre></td></tr></table></figure><p>接着访问<strong>IP</strong>即可<br><img src="/img/%E4%BD%BF%E7%94%A8Clash%E7%BB%99Switch%E5%8A%A0%E9%80%9F/7.jpg"><br><strong>API Base URL</strong>填写<strong>IP:9090</strong>即可(前提是你没改端口)<br><strong>注意</strong>: 有些运营商的配置文件external-controller选项是127.0.0.1:9090，这会导致面板无法连接到Clash<br><strong>解决方法</strong>: 我们将external-controller选项改为0.0.0.0:9090即可<br>然后我们就可以控制节点了<br>默认进去是英文，我们可以到Config-Language改为中文即可</p><p>如果你的运营商经常会更换链接，请添加这个脚本<br>需要环境<strong>Crontab</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vi</span> /root/.config/clash/<span class="hljs-keyword">update</span>.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p>我们新建一个文件<br>然后在里面填入下面的代码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">## 下载配置文件</span><br>wget -P <span class="hljs-regexp">/root/</span>.config/clash -O config.yaml <span class="hljs-string">&quot;运营商提供的订阅链接&quot;</span><br><span class="hljs-comment">## 替换IP</span><br>sed -i <span class="hljs-string">&#x27;s/127.0.0.1:9090/0.0.0.0:9090/g&#x27;</span><br><span class="hljs-regexp">/root/</span>.config<span class="hljs-regexp">/clash/</span>config.yaml<br><span class="hljs-comment">## 重启Clash</span><br>systemctl restart clash.service<br></code></pre></td></tr></table></figure><p>输入完保存退出<br>然后再赋予这个脚本权限</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">chmod +x <span class="hljs-regexp">/root/</span>.config<span class="hljs-regexp">/clash/u</span>pdate.sh<br></code></pre></td></tr></table></figure><p>最后我们添加进Crontab</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">crontab -e</span><br></code></pre></td></tr></table></figure><p>新建一行，并输入</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> * * * sh /root/.config/clash/update.sh<br></code></pre></td></tr></table></figure><p>保存，重启Crontab即可</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>cron restart<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>杂类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>Linux</tag>
      
      <tag>DNS</tag>
      
      <tag>Switch Lite</tag>
      
      <tag>Clash</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Debian安装Cloudreve</title>
    <link href="/posts/13451/"/>
    <url>/posts/13451/</url>
    
    <content type="html"><![CDATA[<p>最近放弃了黑群晖，因为群晖很多功能我好多都不怎么用，而且群晖占的资源比较多，所以换到Linux<br>一开始安装的是Ubuntu看了<strong>某度</strong>的教学，安装了Ubuntu，安装完后我发现自己被坑了，因为我没事把剩下的磁盘空间分配给了 <strong>&#x2F;home</strong> 目录，装完后发现 <strong>&#x2F;home</strong> 目录没啥屌用<br>然后昨天就开始准备重装，有群友推荐装Debian，下载到镜像就开装了，这次我学聪明了<br>装好系统我准备装一个管理文件的软件，最后选定为<strong>Cloudreve</strong><br>别问为什么，问就是好用<br>开始部署(其实部署非常方便，会点Linux的都会)：<br>先到<strong>Github</strong>下载发行版: <a href="https://github.com/cloudreve/Cloudreve/releases/tag/3.5.3">https://github.com/cloudreve/Cloudreve/releases/tag/3.5.3</a><br>选择适合自己系统的版本就可以，因为我这机器是amd所以选择amd版本的<br>我们新建一个文件夹，把它下载到里面</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir cloudreve<br>wget 下载链接<br></code></pre></td></tr></table></figure><p>接着我们使用tar命令解压这个文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">tar</span> -xvf 文件名<br></code></pre></td></tr></table></figure><p>赋予可以运行的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x cloudreve<br></code></pre></td></tr></table></figure><p>到这里就可以完事了<br>我们启动看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./cloudreve<br></code></pre></td></tr></table></figure><p>这样子就是启动成功了<br><img src="/img/Debian%E5%AE%89%E8%A3%85Cloudreve/2.jpg"><br>要记住初始管理员账号和密码，如果忘记了我们可以删除<strong>cloudreve.db</strong>文件来重新生成管理员密码<br>我们访问<strong>ip:5212</strong>就可以进入Cloudreve了<br>下面是配置开机自启动，不想配置就可以出门右转了<br>我们用 <strong>Ctrl + c</strong> 把Cloudreve程序停止，接着跟着下面的操作进行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/</span>cloudreve.service<br></code></pre></td></tr></table></figure><p>我这里用的是vim编辑器，如果你使用其他的编辑器请自行替换<br>进入后，我们把下面的代码全部添加到里面</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=Cloudreve<br><span class="hljs-attr">After</span>=network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">ExecStart</span>=/root/cloudreve/cloudreve<br><span class="hljs-attr">Type</span>=idle<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p>注意：ExecStart是你cloudreve文件的绝对路径，如果跟我的不一样，请自行修改</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl daemon-reload<br><span class="hljs-params">system</span>ctl start cloudreve.service<br><span class="hljs-params">system</span>ctl enable cloudreve.service<br></code></pre></td></tr></table></figure><p>这样子就成功了</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>Debian</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>群晖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Github免费白嫖一个博客</title>
    <link href="/posts/39939/"/>
    <url>/posts/39939/</url>
    
    <content type="html"><![CDATA[<p><strong>新版文章: <a href="https://bricawa.com/posts/57164/">https://bricawa.com/posts/57164/</a></strong><br><strong>此文章已作废，不建议参考</strong><br>想搭建一个博客玩，但是服务器费用太贵，想到Github有托管功能，就自己琢磨着搭了一个<br>首先你要有一个自己的域名，我们先把域名解析到github.io解析都会吧<br>接着我们到进入<a href="https://github.com/">Github</a>，在里面我们注册一个账号，接着新建一个代码库<br><img src="/img/%E4%BD%BF%E7%94%A8Github%E5%85%8D%E8%B4%B9%E7%99%BD%E5%AB%96%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/2.jpg"><br>仓库名我们设置为这样子的格式<em>用户名.github.io</em><br>一定要设置公开，跟下面图片一样就可以了<br><img src="/img/%E4%BD%BF%E7%94%A8Github%E5%85%8D%E8%B4%B9%E7%99%BD%E5%AB%96%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/3.jpg"><br>接着我们安装<strong>Hexo</strong>程序<br>我这里已Termux安装，安装过程和方式跟Linux一样<br>记住要提前安装好Node，Npm这里就不说方法了，网上一搜一大堆，Node的版本一定要14.0+<br>我们开始安装<br>由于国外的网络不稳定，所以我们使用国内的网络安装<br>安装cnpm</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">npm install -g cnpm <span class="hljs-params">--registry=https</span>:<span class="hljs-string">//registry.npmmirror.com</span><br></code></pre></td></tr></table></figure><p>安装完后，我们安装<strong>Hexo</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">cnpm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure><p>接着我们创建一个文件夹用于管理<strong>Hexo</strong>的博客文件</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir hexo<br></code></pre></td></tr></table></figure><p>创建完后我们在里面初始化一下<strong>Hexo</strong>程序</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>这样子我们Hexo的程序就搭建的差不多了<br>我们部署一次在本地查看</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">hexo g <span class="hljs-meta">&amp;&amp; hexo s</span><br></code></pre></td></tr></table></figure><p>访问<a href="http://127.0.0.1:4000/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%8D%9A%E5%AE%A2%E4%BA%86">http://127.0.0.1:4000/就可以看到博客了</a><br><img src="/img/%E4%BD%BF%E7%94%A8Github%E5%85%8D%E8%B4%B9%E7%99%BD%E5%AB%96%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/4.png"><br>为了博客美观，推荐安装主题<br>我们在本地搭建好博客后接着就要部署到Github上，我们先安装依赖</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>接着我们打开Hexo的配置文件_config.yml<br>如果有安装主题，主题有配置文件则打开主题配置文件<br>记住：默认Hexo程序配置文件最底下会有类似的代码，请删除，也就是把</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br> <span class="hljs-built_in">type</span><span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>这段删除，然后把下面的代码添加进配置文件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol"> type:</span> git<br><span class="hljs-symbol"> repo:</span> 代码库链接<br><span class="hljs-symbol"> branch:</span> main<br></code></pre></td></tr></table></figure><p>代码库链接获取方式如下：<br><img src="/img/%E4%BD%BF%E7%94%A8Github%E5%85%8D%E8%B4%B9%E7%99%BD%E5%AB%96%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/5.jpg"><br>我们这里只要HTTPS的链接<br>填完后，我们输入下面的命令，把本地博客部署到Github上去</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>然后会提示输入邮箱和密码<br>这里的密码并不是密码，而是token，创建token跟着下面的图走就可以<br><img src="/img/%E4%BD%BF%E7%94%A8Github%E5%85%8D%E8%B4%B9%E7%99%BD%E5%AB%96%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/6.jpg"><br><img src="/img/%E4%BD%BF%E7%94%A8Github%E5%85%8D%E8%B4%B9%E7%99%BD%E5%AB%96%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/7.jpg"><br><img src="/img/%E4%BD%BF%E7%94%A8Github%E5%85%8D%E8%B4%B9%E7%99%BD%E5%AB%96%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/8.jpg"><br><img src="/img/%E4%BD%BF%E7%94%A8Github%E5%85%8D%E8%B4%B9%E7%99%BD%E5%AB%96%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/9.jpg"><br>日期最好不要填永久，全选即可<br>获取完token后我们就可以部署Github了<br>部署完后我们进入代码库<br>我们选择设置-Page<br><img src="/img/%E4%BD%BF%E7%94%A8Github%E5%85%8D%E8%B4%B9%E7%99%BD%E5%AB%96%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/10.jpg"><br>我们在框内填入自己的域名<br>记得把域名解析CNMAE为github.io<br>然后把HTTPS选上<br>访问自己的域名，如果可以访问就代表正常<br>访问不了看看我说的步骤你有哪些没有做<br>新建一篇文章用下面的命令创建</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type"></span>文章名<br></code></pre></td></tr></table></figure><p>文章要使用Markdown语法编写<br>快速部署命令：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>Linux</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Switch Lite购买感受和建议</title>
    <link href="/posts/8260/"/>
    <url>/posts/8260/</url>
    
    <content type="html"><![CDATA[<p>在今年七月二十一的时候，我入手了Switch Lite<br>当时暑假工打完，工资发了一千三，在<strong>海鲜市场</strong>蹲了几天，最后看见一个八百九十元箱说全宝可梦剑盾款的(这里的箱说全指的是箱子，说明书，配件全在)，最后以八百六十元的价格全款拿下<br>机子成色感觉挺不错的，背面吸风口那个有一点痕迹，正经人谁去看背面，戴个套♂就看不见了<br><img src="/img/Switch-Lite%E8%B4%AD%E4%B9%B0%E6%84%9F%E5%8F%97%E5%92%8C%E5%BB%BA%E8%AE%AE/9.jpg"><br>这里说下，网上一直在说的<strong>三码和一</strong>在Switch Lite这里并不适用，因为Switch Lite的箱子是没有<strong>SN码</strong>的，只能<strong>二码合一</strong><br>那么二码指的是哪两个码呢？<br>第一个码是在主机底部那里<br><img src="/img/Switch-Lite%E8%B4%AD%E4%B9%B0%E6%84%9F%E5%8F%97%E5%92%8C%E5%BB%BA%E8%AE%AE/2.jpg"><br>第二个是在设置-主机-序列号信息<br><img src="/img/Switch-Lite%E8%B4%AD%E4%B9%B0%E6%84%9F%E5%8F%97%E5%92%8C%E5%BB%BA%E8%AE%AE/3.jpg"><br>只要这两个码对得上，机子一般都是全原的<br>这里肯定有人说，你都花了八百六十元了，为什么不加点钱直接上Switch呢？<br>我看重Switch Lite的原因主要是小，加上我不会用到拆卸手柄的功能，主机功能更不用说了，手柄我都不拆，还用啥主机功能，还有一个就是震动功能，其实要和不要也无所谓，谁玩游戏关注震动啊<br>接下来就是配件了(这里没有恰饭哦，我这小小的博客怎么可能恰饭呢)<br>首先是<strong>内存卡</strong>，这是最重要的，一定要选大点的，即使你玩卡带游戏也要选大点的<br>我自己用的是<strong>雷克沙的128GB内存卡</strong>(没恰饭！！)<br><img src="/img/Switch-Lite%E8%B4%AD%E4%B9%B0%E6%84%9F%E5%8F%97%E5%92%8C%E5%BB%BA%E8%AE%AE/4.jpg"><br>现在我感觉128GB的卡也不够用了，因为一个<strong>Apex英雄</strong>就占了我内存卡的20多GB，还有一堆免费游戏，全装肯定不够用<br><img src="/img/Switch-Lite%E8%B4%AD%E4%B9%B0%E6%84%9F%E5%8F%97%E5%92%8C%E5%BB%BA%E8%AE%AE/5.jpg"><br>接着就是钢化膜，钢化膜我用的是绿联的膜，买高清的就可以了，没必要上蓝光，钢化膜是一定要买的，Switch Lite的屏幕是塑料的和我们手机屏幕不一样，很容易留下刮痕<br><img src="/img/Switch-Lite%E8%B4%AD%E4%B9%B0%E6%84%9F%E5%8F%97%E5%92%8C%E5%BB%BA%E8%AE%AE/6.jpg"><br>接着就是硅胶套，其实这个要不要都无所谓，有些硅胶套可以保护机子不被摔坏，有些可以提升手感<br><img src="/img/Switch-Lite%E8%B4%AD%E4%B9%B0%E6%84%9F%E5%8F%97%E5%92%8C%E5%BB%BA%E8%AE%AE/9.jpg"><br>如果你的Switch Lite经常带出去玩的话一定要买一个包，某宝随便搜一搜，买适合自己的就可以了<br><img src="/img/Switch-Lite%E8%B4%AD%E4%B9%B0%E6%84%9F%E5%8F%97%E5%92%8C%E5%BB%BA%E8%AE%AE/7.jpg"><br>这一套下来，我算了下<br>Switch Lite: 860软妹币<br>内存卡: 60.54软妹币<br>钢化膜: 14.8软妹币<br>硅胶套: 9.9软妹币<br>收纳包: 26软妹币<br>一共是971.24<br>这还没加上游戏，我现在的钱包已经快空了<br>另外我还买了条数据线，因为原版的线太笨重了，在家就用原版的，出去外面就用别的，这样子就减轻了一些负担<br>买数据线一定要选择大厂，不然Switch的尾插很容易烧坏<br>—————————分割线<br>接下来说一说购买流程吧<br>第一步：在平台找到喜欢的机器，一定要平台交易，不能私下交易<br>第二部：联系卖家获取机器情况，最好让卖家拍一下摇杆测试的视频还有机器外观的视频<br>第三步：机器到了一定要录开箱视频，避免机器到了有损坏什么的，找卖家理赔不了，接着就是检查各个按键和插口，还有屏幕有没有坏点<br>—————————分割线<br>另外：买Switch一定不要跟风买，不然玩没几天就出现在海鲜市场上了<br>Switch下游戏的时候推荐开个加速，这里推荐买个加速盒，这样子不会影响到自己的网络<br>如果没钱买加速器，这里推荐修改DNS，也可以起到一点作用<br>这个是韩国长安的<br>首选DNS：168.126.63.1<br>备用DNS：168.126.62.2<br><img src="/img/Switch-Lite%E8%B4%AD%E4%B9%B0%E6%84%9F%E5%8F%97%E5%92%8C%E5%BB%BA%E8%AE%AE/8.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>杂类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DNS</tag>
      
      <tag>Switch Lite</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux安装MCSManager面板</title>
    <link href="/posts/35306/"/>
    <url>/posts/35306/</url>
    
    <content type="html"><![CDATA[<p>MCSManager面板是管理MC服务器的一个面板，简称MCSM<br>今天来说说它怎么安装<br>本篇教程基于Ubuntu&#x2F;Debian系统安装，Centos大同小异<br>由于MCSManager迎来一次大更新<br>所以跟之前的安装方法有点区别，官方的Github也有安装教程，小白估计看不懂<br>下面开始安装</p><h3 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h3><p>MCSManager需要Node14+才可以启动，下面是安装过程</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">## 进入目录</span><br>cd /opt/<br><span class="hljs-comment">## 下载Node</span><br>wget https://npmmirror.com/mirrors/<span class="hljs-keyword">node</span><span class="hljs-title">/v14</span>.<span class="hljs-number">17.6</span>/<span class="hljs-keyword">node</span><span class="hljs-title">-v14</span>.<span class="hljs-number">17.6</span>-linux-x64.tar.gz<br><span class="hljs-comment">## 解压文件</span><br>tar -zxvf <span class="hljs-keyword">node</span><span class="hljs-title">-v14</span>.<span class="hljs-number">17.6</span>-linux-x64.tar.gz<br><span class="hljs-comment">## 删除压缩包</span><br>rm -fr <span class="hljs-keyword">node</span><span class="hljs-title">-v14</span>.<span class="hljs-number">17.6</span>-linux-x64.tar.gz<br><span class="hljs-comment">## 链入系统环境</span><br>ln -s /opt/<span class="hljs-keyword">node</span><span class="hljs-title">-v14</span>.<span class="hljs-number">17.6</span>-linux-x64/bin/<span class="hljs-keyword">node</span> <span class="hljs-title">/usr</span>/bin/<span class="hljs-keyword">node</span><br><span class="hljs-title">ln</span> -s /opt/<span class="hljs-keyword">node</span><span class="hljs-title">-v14</span>.<span class="hljs-number">17.6</span>-linux-x64/bin/npm /usr/bin/npm<br></code></pre></td></tr></table></figure><h3 id="安装MCSManager"><a href="#安装MCSManager" class="headerlink" title="安装MCSManager"></a>安装MCSManager</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 创建并进入目录</span><br><span class="hljs-built_in">mkdir</span> /opt/mcsmanager/<br><span class="hljs-built_in">cd</span> /opt/mcsmanager/<br><span class="hljs-comment">## 下载并解压MCSManager的程序</span><br>wget https://github.com/MCSManager/MCSManager/releases/latest/download/mcsmanager_linux_release.tar.gz<br>tar -zxf mcsmanager_linux_release.tar.gz<br><span class="hljs-comment">## 安装依赖</span><br>./install-dependency.sh<br></code></pre></td></tr></table></figure><p>安装完成之后可以使用下面两条命令启动面板端和节点端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 节点启动命令</span><br>./start-daemon.sh<br><span class="hljs-comment">## 面板启动命令</span><br>./start-web.sh<br></code></pre></td></tr></table></figure><p>下面是配置systemctl</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">## 面板端</span><br>vi /etc/systemd/system/mcsm-web.service<br><span class="hljs-comment">## 填充下面的代码</span><br>[Unit]<br><span class="hljs-attribute">Description</span>=MCSManager Web<br><br>[Service]<br><span class="hljs-attribute">WorkingDirectory</span>=/opt/mcsmanager/web<br><span class="hljs-attribute">ExecStart</span>=/opt/node-v14.19.1-linux-x64/bin/node app.js<br><span class="hljs-attribute">ExecReload</span>=/bin/kill -s QUIT <br><span class="hljs-attribute">ExecStop</span>=/bin/kill -s QUIT <br><span class="hljs-attribute">Environment</span>=<span class="hljs-string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><br>[Install]<br><span class="hljs-attribute">WantedBy</span>=multi-user.target<br><br><span class="hljs-comment">## 节点端</span><br>vi /etc/systemd/system/mcsm-daemon.service<br><span class="hljs-comment">## 填充下面的代码</span><br>[Unit]<br><span class="hljs-attribute">Description</span>=MCSManager Daemon<br><br>[Service]<br><span class="hljs-attribute">WorkingDirectory</span>=/opt/mcsmanager/daemon<br><span class="hljs-attribute">ExecStart</span>=/opt/node-v14.19.1-linux-x64/bin/node app.js<br><span class="hljs-attribute">ExecReload</span>=/bin/kill -s QUIT <br><span class="hljs-attribute">ExecStop</span>=/bin/kill -s QUIT <br><span class="hljs-attribute">Environment</span>=<span class="hljs-string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><br>[Install]<br><span class="hljs-attribute">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p>配置好后我们使用下面的命令来控制MCSManager</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment">## 重载服务</span><br><span class="hljs-params">system</span>ctl daemon-reload<br><span class="hljs-comment">## 启动面板端</span><br><span class="hljs-params">system</span>ctl start mcsm-web.service<br><span class="hljs-comment">## 启动节点端</span><br><span class="hljs-params">system</span>ctl start mcsm-daemon.service<br><span class="hljs-comment">## 开机自启</span><br><span class="hljs-params">system</span>ctl enable mcsm-web.service<br><span class="hljs-params">system</span>ctl enable mcsm-daemon.service<br></code></pre></td></tr></table></figure><p>启动好后访问<code>http://服务器ip:23333</code><br>开始使用都会点吧<br><img src="/img/Linux%E5%AE%89%E8%A3%85MCSManager%E9%9D%A2%E6%9D%BF/2.jpg"><br>然后提示让你创建一个账号，应该都会吧，没有人不会吧<br><img src="/img/Linux%E5%AE%89%E8%A3%85MCSManager%E9%9D%A2%E6%9D%BF/3.jpg"><br>如果你是刚刚上手MCSManager面板，就选择首次使用<br>以前用过就选择老用户<br>这里推荐选择首次使用，因为现在的MCSManager面板跟之前不一样了<br><img src="/img/Linux%E5%AE%89%E8%A3%85MCSManager%E9%9D%A2%E6%9D%BF/4.jpg"><br>到这里就全部安装好了，启动服务器什么的都会吧</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>MCSManager</tag>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用CloudFlare加速Github下载</title>
    <link href="/posts/32336/"/>
    <url>/posts/32336/</url>
    
    <content type="html"><![CDATA[<p>最近在拉取Github项目源码的时候经常出现404，自己在网上研究了一下，发现有个项目可以用CloudFlare的代理流量来下载Github的项目源码<br>我们今天用的项目是<a href="https://github.com/hunshcn/gh-proxy">gh-proxy</a><br>首先我们注册个CloudFlare账号<a href="http://cloudflare.com/">点我转跳CF</a><br>注册应该都会吧，没有人不会注册吧<br>接着我们点开菜单的Workers<br><img src="/img/%E7%94%A8CloudFlare%E5%8A%A0%E9%80%9FGithub%E4%B8%8B%E8%BD%BD/2.jpg"><br>选择免费的那个接着创建一个服务，服务名称就是以后访问的方式，不过没用，因为CF的域名被污染了，所以自己要准备一个域名并添加到CloudFlera里面<br>我们选择<strong>HTTP处理程序</strong><br>创建好了后我们点<strong>快速编辑</strong>，删除全部代码把下面的代码填进去</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * static files (404.html, sw.js, conf.js)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ASSET_URL</span> = <span class="hljs-string">&#x27;https://hunshcn.github.io/gh-proxy/&#x27;</span><br><span class="hljs-comment">// 前缀，如果自定义路由为example.com/gh/*，将PREFIX改为 &#x27;/gh/&#x27;，注意，少一个杠都会错！</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PREFIX</span> = <span class="hljs-string">&#x27;/&#x27;</span><br><span class="hljs-comment">// 分支文件使用jsDelivr镜像的开关，0为关闭，默认关闭</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Config</span> = &#123;<br>    <span class="hljs-attr">jsdelivr</span>: <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-keyword">const</span> whiteList = [] <span class="hljs-comment">// 白名单，路径里面有包含字符的才会通过，e.g. [&#x27;/username/&#x27;]</span><br><br><span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">RequestInit</span>&#125; */</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PREFLIGHT_INIT</span> = &#123;<br>    <span class="hljs-attr">status</span>: <span class="hljs-number">204</span>,<br>    <span class="hljs-attr">headers</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(&#123;<br>        <span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span>: <span class="hljs-string">&#x27;*&#x27;</span>,<br>        <span class="hljs-string">&#x27;access-control-allow-methods&#x27;</span>: <span class="hljs-string">&#x27;GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS&#x27;</span>,<br>        <span class="hljs-string">&#x27;access-control-max-age&#x27;</span>: <span class="hljs-string">&#x27;1728000&#x27;</span>,<br>    &#125;),<br>&#125;<br><br><br><span class="hljs-keyword">const</span> exp1 = <span class="hljs-regexp">/^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:releases|archive)\/.*$/i</span><br><span class="hljs-keyword">const</span> exp2 = <span class="hljs-regexp">/^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:blob|raw)\/.*$/i</span><br><span class="hljs-keyword">const</span> exp3 = <span class="hljs-regexp">/^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:info|git-).*$/i</span><br><span class="hljs-keyword">const</span> exp4 = <span class="hljs-regexp">/^(?:https?:\/\/)?raw\.(?:githubusercontent|github)\.com\/.+?\/.+?\/.+?\/.+$/i</span><br><span class="hljs-keyword">const</span> exp5 = <span class="hljs-regexp">/^(?:https?:\/\/)?gist\.(?:githubusercontent|github)\.com\/.+?\/.+?\/.+$/i</span><br><span class="hljs-keyword">const</span> exp6 = <span class="hljs-regexp">/^(?:https?:\/\/)?github\.com\/.+?\/.+?\/tags.*$/i</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">any</span>&#125; <span class="hljs-variable">body</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">status</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Object&lt;string, string&gt;</span>&#125; <span class="hljs-variable">headers</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">makeRes</span>(<span class="hljs-params">body, status = <span class="hljs-number">200</span>, headers = &#123;&#125;</span>) &#123;<br>    headers[<span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span>] = <span class="hljs-string">&#x27;*&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(body, &#123;status, headers&#125;)<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">urlStr</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">newUrl</span>(<span class="hljs-params">urlStr</span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(urlStr)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;fetch&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> ret = <span class="hljs-title function_">fetchHandler</span>(e)<br>        .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-title function_">makeRes</span>(<span class="hljs-string">&#x27;cfworker error:\n&#x27;</span> + err.<span class="hljs-property">stack</span>, <span class="hljs-number">502</span>))<br>    e.<span class="hljs-title function_">respondWith</span>(ret)<br>&#125;)<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkUrl</span>(<span class="hljs-params">u</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> [exp1, exp2, exp3, exp4, exp5, exp6]) &#123;<br>        <span class="hljs-keyword">if</span> (u.<span class="hljs-title function_">search</span>(i) === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">FetchEvent</span>&#125; <span class="hljs-variable">e</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchHandler</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">const</span> req = e.<span class="hljs-property">request</span><br>    <span class="hljs-keyword">const</span> urlStr = req.<span class="hljs-property">url</span><br>    <span class="hljs-keyword">const</span> urlObj = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(urlStr)<br>    <span class="hljs-keyword">let</span> path = urlObj.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;q&#x27;</span>)<br>    <span class="hljs-keyword">if</span> (path) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Response</span>.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;https://&#x27;</span> + urlObj.<span class="hljs-property">host</span> + <span class="hljs-variable constant_">PREFIX</span> + path, <span class="hljs-number">301</span>)<br>    &#125;<br>    <span class="hljs-comment">// cfworker 会把路径中的 `//` 合并成 `/`</span><br>    path = urlObj.<span class="hljs-property">href</span>.<span class="hljs-title function_">substr</span>(urlObj.<span class="hljs-property">origin</span>.<span class="hljs-property">length</span> + <span class="hljs-variable constant_">PREFIX</span>.<span class="hljs-property">length</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^https?:\/+/</span>, <span class="hljs-string">&#x27;https://&#x27;</span>)<br>    <span class="hljs-keyword">if</span> (path.<span class="hljs-title function_">search</span>(exp1) === <span class="hljs-number">0</span> || path.<span class="hljs-title function_">search</span>(exp5) === <span class="hljs-number">0</span> || path.<span class="hljs-title function_">search</span>(exp6) === <span class="hljs-number">0</span> || path.<span class="hljs-title function_">search</span>(exp3) === <span class="hljs-number">0</span> || path.<span class="hljs-title function_">search</span>(exp4) === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">httpHandler</span>(req, path)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (path.<span class="hljs-title function_">search</span>(exp2) === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Config</span>.<span class="hljs-property">jsdelivr</span>) &#123;<br>            <span class="hljs-keyword">const</span> newUrl = path.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;/blob/&#x27;</span>, <span class="hljs-string">&#x27;@&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^(?:https?:\/\/)?github\.com/</span>, <span class="hljs-string">&#x27;https://cdn.jsdelivr.net/gh&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Response</span>.<span class="hljs-title function_">redirect</span>(newUrl, <span class="hljs-number">302</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            path = path.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;/blob/&#x27;</span>, <span class="hljs-string">&#x27;/raw/&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">httpHandler</span>(req, path)<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (path.<span class="hljs-title function_">search</span>(exp4) === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">const</span> newUrl = path.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(?&lt;=com\/.+?\/.+?)\/(.+?\/)/</span>, <span class="hljs-string">&#x27;@$1&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^(?:https?:\/\/)?raw\.(?:githubusercontent|github)\.com/</span>, <span class="hljs-string">&#x27;https://cdn.jsdelivr.net/gh&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Response</span>.<span class="hljs-title function_">redirect</span>(newUrl, <span class="hljs-number">302</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-variable constant_">ASSET_URL</span> + path)<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Request</span>&#125; <span class="hljs-variable">req</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">pathname</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">httpHandler</span>(<span class="hljs-params">req, pathname</span>) &#123;<br>    <span class="hljs-keyword">const</span> reqHdrRaw = req.<span class="hljs-property">headers</span><br><br>    <span class="hljs-comment">// preflight</span><br>    <span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span> === <span class="hljs-string">&#x27;OPTIONS&#x27;</span> &amp;&amp;<br>        reqHdrRaw.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;access-control-request-headers&#x27;</span>)<br>    ) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-literal">null</span>, <span class="hljs-variable constant_">PREFLIGHT_INIT</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> reqHdrNew = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(reqHdrRaw)<br><br>    <span class="hljs-keyword">let</span> urlStr = pathname<br>    <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> whiteList) &#123;<br>        <span class="hljs-keyword">if</span> (urlStr.<span class="hljs-title function_">includes</span>(i)) &#123;<br>            flag = <span class="hljs-literal">true</span><br>            <span class="hljs-keyword">break</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!flag) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-string">&quot;blocked&quot;</span>, &#123;<span class="hljs-attr">status</span>: <span class="hljs-number">403</span>&#125;)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (urlStr.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;github&#x27;</span>)) &#123;<br>        urlStr = <span class="hljs-string">&#x27;https://&#x27;</span> + urlStr<br>    &#125;<br>    <span class="hljs-keyword">const</span> urlObj = <span class="hljs-title function_">newUrl</span>(urlStr)<br><br>    <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">RequestInit</span>&#125; */</span><br>    <span class="hljs-keyword">const</span> reqInit = &#123;<br>        <span class="hljs-attr">method</span>: req.<span class="hljs-property">method</span>,<br>        <span class="hljs-attr">headers</span>: reqHdrNew,<br>        <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;manual&#x27;</span>,<br>        <span class="hljs-attr">body</span>: req.<span class="hljs-property">body</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">proxy</span>(urlObj, reqInit)<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">URL</span>&#125; <span class="hljs-variable">urlObj</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">RequestInit</span>&#125; <span class="hljs-variable">reqInit</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">proxy</span>(<span class="hljs-params">urlObj, reqInit</span>) &#123;<br>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(urlObj.<span class="hljs-property">href</span>, reqInit)<br>    <span class="hljs-keyword">const</span> resHdrOld = res.<span class="hljs-property">headers</span><br>    <span class="hljs-keyword">const</span> resHdrNew = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(resHdrOld)<br><br>    <span class="hljs-keyword">const</span> status = res.<span class="hljs-property">status</span><br><br>    <span class="hljs-keyword">if</span> (resHdrNew.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;location&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">let</span> _location = resHdrNew.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;location&#x27;</span>)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">checkUrl</span>(_location))<br>            resHdrNew.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;location&#x27;</span>, <span class="hljs-variable constant_">PREFIX</span> + _location)<br>        <span class="hljs-keyword">else</span> &#123;<br>            reqInit.<span class="hljs-property">redirect</span> = <span class="hljs-string">&#x27;follow&#x27;</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">proxy</span>(<span class="hljs-title function_">newUrl</span>(_location), reqInit)<br>        &#125;<br>    &#125;<br>    resHdrNew.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;access-control-expose-headers&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>    resHdrNew.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br><br>    resHdrNew.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;content-security-policy&#x27;</span>)<br>    resHdrNew.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;content-security-policy-report-only&#x27;</span>)<br>    resHdrNew.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;clear-site-data&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(res.<span class="hljs-property">body</span>, &#123;<br>        status,<br>        <span class="hljs-attr">headers</span>: resHdrNew,<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>填完后点击<strong>保存并部署</strong><br>然后点击旁边的<strong>发送</strong>按钮，如果显示200K就是正常的了，不是的话就看看你的代码会不会输错<br><img src="/img/%E7%94%A8CloudFlare%E5%8A%A0%E9%80%9FGithub%E4%B8%8B%E8%BD%BD/3.jpg"><br>因为CF域名被DNS污染的关系，我们需要使用自己的域名，我们再次点开Workers选择刚才创建的服务，点击<strong>触发器</strong><br>找到触发器选择<strong>添加自定义域</strong>，把你想要的自定义域名填进去<br><img src="/img/%E7%94%A8CloudFlare%E5%8A%A0%E9%80%9FGithub%E4%B8%8B%E8%BD%BD/4.jpg"><br>然后访问你的域名就可以使用了</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>CloudFlare</tag>
      
      <tag>CDN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用Ubuntu搭建我的世界服务器</title>
    <link href="/posts/35408/"/>
    <url>/posts/35408/</url>
    
    <content type="html"><![CDATA[<p>今天的教程用到的系统是:Ubuntu<br>在Termux安装的Ubuntu也可以使用<br>本次教程搭建的是Nukkit服务器<br>这篇文章主要是来测试博客的功能，所以看的有点花里胡哨<br>首先在确保你有在Ubuntu上安装了Java</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">java -<span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>使用这条命令查询你的Java版本号<br><em>root@localhost:~# java -version</em><br><em>java version “15.0.2” 2021-01-19Java(TM) SE Runtime Environment (build 15.0.2+7-27)Java HotSpot(TM) 64-Bit Server VM (build 15.0.2+7-27, mixed mode)</em><br>通过这条命令可以知道你有没有安装Java<br>安装Java的方法这里就不叙述了，CSDN有很多教程<br>有了Java后开始安装</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir <span class="hljs-built_in">Server</span>/nk<br></code></pre></td></tr></table></figure><p>这条命令是创建一个nk文件在Server里面<br>接着转到nk目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> Server/nk<br></code></pre></td></tr></table></figure><p>下载nk服务端</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>ci.opencollab.dev<span class="hljs-regexp">/job/</span>NukkitX<span class="hljs-regexp">/job/</span>Nukkit<span class="hljs-regexp">/job/m</span>aster<span class="hljs-regexp">/825/</span>artifact<span class="hljs-regexp">/target/</span>nukkit-<span class="hljs-number">1.0</span>-SNAPSHOT.jar<br></code></pre></td></tr></table></figure><p>这是版本是1.16.201<br>如果有新版的可以到这个链接去看看<br><em><strong><a href="https://ci.opencollab.dev/job/NukkitX/job/Nukkit/job/master/">https://ci.opencollab.dev/job/NukkitX/job/Nukkit/job/master/</a></strong></em><br><em><strong>1.16.201是#825的</strong></em><br>接着执行</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">vim <span class="hljs-keyword">run</span>.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p>在键盘输入<strong>i</strong>然后在里面输入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -jar nukkit-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-SNAPSHOT.jar<br></code></pre></td></tr></table></figure><p>然后按Esc<br>输入**wq!**不要复制粘贴用键盘输入<br>接着执行</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">chmod 777 <span class="hljs-keyword">run</span>.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p>给这个文件权限<br>然后执行</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">./<span class="hljs-keyword">run</span>.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p>服务器就启动了<br>以后直接用run.sh启动，就不用记那么长的命令了<br><img src="/img/%E7%94%A8Ubuntu%E6%90%AD%E5%BB%BA%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/2.png"></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
